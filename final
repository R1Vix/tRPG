<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>默海之役</title>
        <style>
            @import url(https://fonts.googleapis.com/earlyaccess/cwtexfangsong.css);
            body
            {
                padding: 0px;
                margin: 0px;        
                width: 2000px;
                height: auto;        
                background-repeat: no-repeat;                
            }
            table
            {
                padding: 0px;
                margin: 0px;
                width: 2000px;
                height: 1040px;
                border-collapse: collapse;
            }
            td
            {
                padding: 0px;
                margin: 0px;
                border: 0.5px solid black;
                width: 100px;
                height: 100px;
            }
            .characterImgSize
            {
                padding: 0px;
                margin: 0px;
                width: 100px;
                height: 100px;
            }
            .characterSkillSize
            {
                padding: 0px;
                margin: 0px;
                width: 50px;
                height: 50px;
            }
            .terrain
            {
                padding: 0px;
                margin: 0px;
                width: 100px;
                height: 100px;
                opacity: 0.5;
            }
            .turnPanel
            {
                padding: 0px;
                margin: 0px;
                width: 100%;
                height: 30px;
                text-align: center;
                font-family:"cwTeXFangSong";
                font-size: 30px;
            }
            .characterInfoPanel
            {
                padding: 0px;
                margin: 0px;
                border: 0.5px solid black;
                width: calc(100%/2);
                height: 200px;
                text-align: center;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                float: left;
                box-sizing: border-box;
            }
            .panelDetail
            {
                padding: 0px;
                margin: 0px;
                border-top: 0.5px solid black;
                text-align: center;
                width: calc(100%/3);
                height: auto;
                float: left;
                box-sizing: border-box;
            }
            .text
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 200px;
                position: absolute;
                top: 35%;
                left: 50%;
                transform: translate(-50%, -50%);
            }
            .button
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                position: absolute;
                top: 65%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 150px;
                height: 75px;
            }
            .storyText
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 40px;
                font-weight: bold;
                color: lightgoldenrodyellow;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }
            .storyButton
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                position: absolute;
                top: 90%;
                left: 85%;
                transform: translate(-50%, -50%);
                width: 150px;
                height: 75px;
            }
            .difficultyText
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 200px;
                position: absolute;
                top: 20%;
                left: 50%;
                transform: translate(-50%, -50%);
            }
            .difficultyButtonEasy
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                position: absolute;
                top: 40%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 150px;
                height: 75px;
                color: green;
            }
            .difficultyButtonHard
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                position: absolute;
                top: 60%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 150px;
                height: 75px;
                color: red;
            }
            .difficultyButtonAbyss
            {
                padding: 0px;
                margin: 0px;
                font-family:"cwTeXFangSong";
                font-size: 30px;
                position: absolute;
                top: 80%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 150px;
                height: 75px;
                color: purple;
            }
        </style>
        <script>
            let selectedFlag=1,characterX,characterY,playerAction,allyAliveUnit,enemyAliveUnit,difficulty,characterStorage=new Array(20)
            for (let i=0;i<characterStorage.length;i++) characterStorage[i]=new Array(10)

            function unit(side, unitName, unitIcon, nameDescription, unitLevel, weaponAttribute, mobility, hitPoint, hitPointMaxium, hitPointGrowth, damage, damageGrowth, speed, speedGrowth, defense, defenseGrowth, resistance, resistanceGrowth, weaponName, weaponDescripton, weaponRange, weaponMight, skill1Name, skill1Icon, skill1Description, skill1Level, skill2Name, skill2Icon, skill2Description, skill2Level, skill3Name, skill3Icon, skill3Description, skill3Level)
            {
                this.attackActionPoint = 1
                this.moveActionPoint = 1
                this.side = side
                this.unitName = unitName
                this.unitIcon = unitIcon
                this.nameDescription = nameDescription
                this.unitLevel = unitLevel
                this.weaponAttribute = weaponAttribute
                this.mobility = mobility
                this.hitPoint = hitPoint
                this.hitPointMaxium = hitPointMaxium
                this.hitPointGrowth = hitPointGrowth
                this.damage = damage
                this.damageGrowth = damageGrowth
                this.speed = speed
                this.speedGrowth = speedGrowth
                this.defense = defense
                this.defenseGrowth = defenseGrowth
                this.resistance = resistance
                this.resistanceGrowth = resistanceGrowth
                this.weaponName = weaponName
                this.weaponDescripton = weaponDescripton
                this.weaponRange = weaponRange
                this.weaponMight = weaponMight
                this.skill1Name = skill1Name
                this.skill1Icon = skill1Icon
                this.skill1Description = skill1Description
                this.skill1Level = skill1Level
                this.skill2Name = skill2Name
                this.skill2Icon = skill2Icon
                this.skill2Description = skill2Description
                this.skill2Level = skill2Level
                this.skill3Name = skill3Name
                this.skill3Icon = skill3Icon
                this.skill3Description = skill3Description
                this.skill3Level = skill3Level
            }

            function cover()
            {
                document.getElementById("body").setAttribute("style","background-image: url(neturalBackground00.png); background-size: cover;")
                document.getElementById("display").innerHTML="<div class='text'>默海之役</div><br><input type='button' id='startButton' value='開始遊戲' class='button'>"
                document.getElementById("startButton").addEventListener("click",selectDifficulty,false)
            }

            function selectDifficulty()
            {
                document.getElementById("display").innerHTML="<div class='difficultyText'>請選擇難度</div><br><input type='button' id='easy' value='簡單' class='difficultyButtonEasy'><br><input type='button' id='hard' value='困難' class='difficultyButtonHard'><br><input type='button' id='abyss' value='深淵' class='difficultyButtonAbyss'>"
                document.getElementById("easy").addEventListener("click",function(){difficulty=1;story()},false)
                document.getElementById("hard").addEventListener("click",function(){difficulty=2;story()},false)
                document.getElementById("abyss").addEventListener("click",function(){difficulty=3;story()},false)
            }

            function story()
            {
                document.getElementById("display").innerHTML="<div class='storyText'>在不久後的未來，隨著科技的發展，人類能夠自由分離並控制自己的靈魂，而精通這項技術的人，在當時則稱作「召喚師」。但是在召喚過程中，若操作不當，很可能會使靈魂與肉體徹底分離，形成所謂的「默靈」。默靈會侵蝕人類，並將其肉體佔為己有，唯有召喚師才能徹底消滅默靈。<br><br>「啊啊啊啊啊！」<br>「竟然睡過頭！」<br>「開學第一天就要遲到了啦！！怎麼辦！！！」<br><br>我，是一位大學新鮮人，別看我一臉呆樣，其實我是一位召喚師，雖然我的能力尚未成熟，但我相信在接下來的大學生活中一定會派上用場的！<br><br>欸？奇怪？明明今天開學，怎麼學校一個人都沒有？<br>「救命啊！默靈入侵校園內了啦！」<br>怎麼會這樣？<br>「好像是被海浪拍上岸的，現在校園內全部都是默靈！」<br>怎麼可以開學第一天就這樣！雖然我能力有限，但是這些數量，我應該能夠應付的吧！</div><br><input type='button' id='skipButton' value='跳過' class='storyButton'>"
                document.getElementById("skipButton").addEventListener("click",game,false)
            }

            function game()
            {
                let board="<table>"
                for(let i=0;i<10;i++)
                {
                    for(let j=0;j<20;j++)
                    {
                        characterStorage[j][i]=undefined

                    }
                }

                summoner = new unit("alpha", "召喚師", "<img src='summoner.png' alt = '我方召喚師' class='characterImgSize'>", "主角，使用劍作為武器，能力平均", 4, 0, 2, 22, 22, 0.7, 13, 0.75, 7, 0.65, 11, 0.7, 8, 0.55, "斬裂劍", "召喚師的御用武器，以敵人防守或魔防中較低者計算傷害", 1, [0, 6, 10, 14], "至尊召喚師", "<img src='divineSummoner.png' alt = '至尊召喚師' class='characterSkillSize'>", ["", "", "", "受到敵人攻擊時，當自己的HP高於 2，且受到敵人的致命攻擊時，將傷害盡低至身HP會剩下 1，一場遊戲僅能發動一次"], 3, "反擊", "<img src='counter.png' alt = '反擊' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "若自身HP為100%，受到敵人攻擊時，可無視距離進行反擊", "若自身HP高於50%，受到敵人攻擊時，可無視距離進行反擊", "受到敵人攻擊時，可無視距離進行反擊"], 0, "復甦", "<img src='renewal.png' alt = '復甦' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "戰鬥後，回復 2 HP", "戰鬥後，回復 8 HP", "戰鬥後，回復 10 HP"], 0)
                characterStorage[18][6] = summoner

                heavyInfantry = new unit("alpha", "重裝兵", "<img src='heavyInfantry.png' alt = '我方重裝兵' class='characterImgSize'>", "使用斧頭作為武器，擁有優秀的防禦力，但移動速度較慢", 1, 0, 1, 25, 25, 0.8, 11, 0.55, 6, 0.6, 12, 0.7, 5, 0.5, "蒼海之斧", "海浪潘打上岸的斧頭，隱約透漏著魔力", 1, [0, 6, 9, 12]	, "不動如山", "<img src='hardyBearing.png' alt = '不動如山' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "受到敵人攻擊時，若自身HP高於 75%，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 50% ，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 25% ，則自己與敵人皆無法進行追擊"], 0, "破防擊", "<img src='armorBreak.png' alt = '破防擊' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "攻擊時，在敵人防守及魔防 - 30% 的情況下給予傷害", "攻擊時，在敵人防守及魔防 - 50% 的情況下給予傷害", "攻擊時，在敵人防守及魔防 - 70% 的情況下給予傷害"], 0, "尊嚴", "<img src='honeAtkDef.png' alt = '尊嚴' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "戰鬥開始時，若自身HP高於 75% ，則攻擊、防禦 + 2，否則攻擊、防禦 - 7", "戰鬥開始時，若自身HP高於 50% ，則攻擊、防禦 + 4，否則攻擊、防禦 - 7", "戰鬥開始時，若自身HP高於 25% ，則攻擊、防禦 + 6，否則攻擊、防禦 - 7"], 0)
                characterStorage[17][5] = heavyInfantry

                knight = new unit("alpha", "騎兵", "<img src='knight.png' alt = '我方騎兵' class='characterImgSize'>", "使用槍作為武器，機動性較高", 1, 0, 3, 21, 21, 0.55, 9, 0.6, 8, 0.55, 9, 0.55, 12, 0.7, "反攻槍", "一把刺槍，能針對敵人弱點乘勝追擊", 1, [0, 6, 9, 12], "衝敵斬", "<img src='lunge.png' alt = '衝敵斬' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "由自己發動攻擊時，若自身HP高於 25%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 50%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 75%，則敵人攻擊 - 5"], 0, "回擊", "<img src='riptose.png' alt = '回擊' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "受到敵人攻擊時，若自身HP高於 75% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 50% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 25% 時，則必定可進行追擊"], 0, "麗華", "<img src='blizzard.png' alt = '麗華' class='characterSkillSize'>", ["提升角色等級即可強化此技能","受到敵人攻擊時，戰鬥中的魔防 + 2", "受到敵人攻擊時，戰鬥中的魔防 + 4", "受到敵人攻擊時，戰鬥中的魔防 + 6"], 0)
                characterStorage[18][5] = knight

                archer = new unit("alpha", "弓箭手", "<img src='archer.png' alt = '我方弓箭手' class='characterImgSize'>", "使用弓作為武器，可攻擊較遠的距離", 1, 0, 2, 19, 19, 0.65, 8, 0.65, 8, 0.75, 7, 0.6, 6, 0.45, "白尾聖弓", "聖戰士烏勒爾所遺留下來的武器之一，尾端冒出的白色火焰為其一特徵", 2, [0, 6, 9, 12], "覺醒", "<img src='awaken.png' alt = '覺醒' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "由自己發動攻擊時，戰鬥中的速度 + 2", "由自己發動攻擊時，戰鬥中的速度 + 4", "由自己發動攻擊時，戰鬥中的速度 + 6"], 0, "蛇毒", "<img src='poison.png' alt = '蛇毒' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "由自己發動攻擊時，戰鬥後給予敵人 4 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 7 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 10 點傷害"], 0, "靜謐", "<img src='silence.png' alt = '靜謐' class='characterSkillSize'>", ["提升角色等級即可強化此技能", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 5 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 3 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人時，敵方無法反擊"], 0)
                characterStorage[19][4] = archer

                mage = new unit("alpha", "魔刃", "<img src='mage.png' alt = '我方魔刃' class='characterImgSize'>", "使用黑魔法作為武器，以敵人的魔防計算傷害", 1, 1, 2, 19, 19, 0.65, 8, 0.65, 8, 0.65, 8, 0.65, 6, 0.65, "深邃黑暗", "闇魔道研究學者留下來的咒書，但在錯誤的手中會帶來痛苦的代價", 2, [0, 6, 9, 12], "冰河", "<img src='iceberg.png' alt = '冰河' class='characterSkillSize'>", ["提升角色等級即可強化此技能","由自己發動攻擊時，戰鬥中的攻擊增加自身魔防的 30%", "由自己發動攻擊時，戰鬥中的攻擊增加自身魔防的 50%", "由自己發動攻擊時，戰鬥中的攻擊增加自身魔防的 80%"], 0, "生命的代價", "<img src='costOfLife.png' alt = '生命的代價' class='characterSkillSize'>", ["提升角色等級即可強化此技能","戰鬥中的攻擊、速度、防禦、魔防 + 1，戰鬥後給予自己 2 點傷害", "戰鬥中的攻擊、速度、防禦、魔防 + 2，戰鬥後給予自己 4 點傷害", "戰鬥中的攻擊、速度、防禦、魔防 + 3，戰鬥後給予自己 6 點傷害"], 0, "憤怒", "<img src='wrath.png' alt = '憤怒' class='characterSkillSize'>", ["提升角色等級即可強化此技能","戰鬥開始時，若自身HP低於 25%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 50%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 75%, 則造成的傷害 + 10"], 0)
                characterStorage[19][5] = mage

                monk = new unit("alpha", "僧侶", "<img src='monk.png' alt = '我方僧侶' class='characterImgSize'>", "使用白魔法作為武器，可以輔助我方單位", 1, 1, 2, 19, 19, 0.7, 6, 0.6, 7, 0.55, 6, 0.55, 11, 0.55, "海神的祝福", "海神親手打造之杖，將心願託付於後世", 2, [0, 6, 9, 12], "治癒杖", "<img src='heal.png' alt = '治癒杖' class='characterSkillSize'>", ["我方回合開始時，回復我方所有單位 5 HP","我方回合開始時，回復我方所有單位 10 HP" , "我方回合開始時，回復周圍 2 格內的我方單位 15 HP", "我方回合開始時，回復周圍 2 格內的我方單位（自身攻擊的 80%）HP"], 0, "奉獻", "<img src='devotion.png' alt = '奉獻' class='characterSkillSize'>", ["提升角色等級即可強化此技能","攻擊時，回復所造成傷害的 25%", "攻擊時，回復所造成傷害的 50%", "攻擊時，回復所造成傷害的 75%"], 0, "完美", "<img src='honeSpdRes.png' alt = '完美' class='characterSkillSize'>", ["提升角色等級即可強化此技能","戰鬥開始時，若自身HP高於 75% ，則速度、魔防 + 2，否則速度、魔防 - 7", "戰鬥開始時，若自身HP高於 50% ，則速度、魔防 + 4，否則速度、魔防 - 7", "戰鬥開始時，若自身HP高於 25% ，則速度、魔防 + 6，否則速度、魔防 - 7"], 0)
                characterStorage[19][6] = monk

                boss = new unit("beta", "默靈頭目", "<img src='boss.png' alt = '敵方頭目' class='characterImgSize'>", "使用劍作為武器，能力優秀", [0, 5, 8, 10], 0, 0, 0, [0, 23, 25, 27], 0, 0, [0, 10, 13, 15], 0, [0, 12, 14, 16], 0, [0, 11, 12, 14], 0, [0, 9, 10, 13], "始祖斬裂劍", "默靈的專屬武器，由自己發動攻擊時，攻擊2次", 1, [0, 6, 10, 14], "渾沌默靈", "<img src='divineSummoner.png' alt = '渾沌默靈' class='characterSkillSize'>", ["", "-", "當自己的HP高於 2，且受到敵人的致命攻擊時，將傷害盡低至身HP會剩下 1，一場遊戲僅能發動一次", "當自己的HP高於 2，且受到敵人的致命攻擊時，將傷害盡低至身HP會剩下 1，一場遊戲僅能發動一次"], 1, "反擊", "<img src='counter.png' alt = '反擊' class='characterSkillSize'>", ["", "若自身HP為100%，受到敵人攻擊時，可無視距離進行反擊", "若自身HP高於50%，受到敵人攻擊時，可無視距離進行反擊", "受到敵人攻擊時，可無視距離進行反擊"], 1, "復甦", "<img src='renewal.png' alt = '復甦' class='characterSkillSize'>", ["", "戰鬥後，回復 2 HP", "戰鬥後，回復 8 HP", "戰鬥後，回復 10 HP"], 1)
                characterStorage[1][8] = boss

                assassin1 = new unit("beta", "默靈刺客", "<img src='assassin.png' alt = '敵方刺客一' class='characterImgSize'>", "侵略校園的默靈刺客，使用劍作為武器，能力平均", [0, 1, 4, 7], 0, 2, 20, 20, 0.5, 10, 0.55, 7, 0.45, 8, 0.5, 6, 0.35, "闇之鐵羽劍", "默靈的專屬武器，集合了默靈的魔力", 1, [0, 6, 9, 12], "渾沌學", "<img src='darkness.png' alt = '渾沌學' class='characterSkillSize'>", ["", "造成傷害 + 20%", "造成傷害 + 40%", "造成傷害 + 60%"], 1, "覺醒", "<img src='awaken.png' alt = '覺醒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的速度 + 2", "由自己發動攻擊時，戰鬥中的速度 + 4", "由自己發動攻擊時，戰鬥中的速度 + 6"], 1, "隱匿", "<img src='stealth.png' alt = '隱匿' class='characterSkillSize'>", ["", "受到物理攻擊時，降低 25% 的傷害", "受到物理攻擊時，降低 50% 的傷害", "受到物理攻擊時，降低 75% 的傷害"], 1)
                characterStorage[14][7] = assassin1

                assassin2 = new unit("beta", "默靈刺客", "<img src='assassin.png' alt = '敵方刺客二' class='characterImgSize'>", "侵略校園的默靈刺客，使用劍作為武器，能力平均", [0, 2, 5, 8], 0, 2, 20, 20, 0.5, 10, 0.55, 7, 0.45, 8, 0.5, 6, 0.35, "闇之鐵羽劍", "默靈的專屬武器，集合了默靈的魔力", 1, [0, 6, 9, 12], "渾沌學", "<img src='darkness.png' alt = '渾沌學' class='characterSkillSize'>", ["", "造成傷害 + 20%", "造成傷害 + 40%", "造成傷害 + 60%"], 1, "覺醒", "<img src='awaken.png' alt = '覺醒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的速度 + 2", "由自己發動攻擊時，戰鬥中的速度 + 4", "由自己發動攻擊時，戰鬥中的速度 + 6"], 1, "隱匿", "<img src='stealth.png' alt = '隱匿' class='characterSkillSize'>", ["", "受到物理攻擊時，降低 25% 的傷害", "受到物理攻擊時，降低 50% 的傷害", "受到物理攻擊時，降低 75% 的傷害"], 1)
                characterStorage[9][2] = assassin2

                assassin3 = new unit("beta", "默靈刺客", "<img src='assassin.png' alt = '敵方刺客三' class='characterImgSize'>", "侵略校園的默靈刺客，使用劍作為武器，能力平均", [0, 3, 6, 9], 0, 2, 20, 20, 0.5, 10, 0.55, 7, 0.45, 8, 0.5, 6, 0.35, "闇之鐵羽劍", "默靈的專屬武器，集合了默靈的魔力", 1, [0, 6, 9, 12], "渾沌學", "<img src='darkness.png' alt = '渾沌學' class='characterSkillSize'>", ["", "造成傷害 + 20%", "造成傷害 + 40%", "造成傷害 + 60%"], 1, "覺醒", "<img src='awaken.png' alt = '覺醒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的速度 + 2", "由自己發動攻擊時，戰鬥中的速度 + 4", "由自己發動攻擊時，戰鬥中的速度 + 6"], 1, "隱匿", "<img src='stealth.png' alt = '隱匿' class='characterSkillSize'>", ["", "受到物理攻擊時，降低 25% 的傷害", "受到物理攻擊時，降低 50% 的傷害", "受到物理攻擊時，降低 75% 的傷害"], 1)
                characterStorage[5][1] = assassin3

                armoredInfantry1 = new unit("beta", "默靈重裝兵", "<img src='armoredInfantry.png' alt = '敵方重裝兵一' class='characterImgSize'>", "侵略校園的默靈重裝兵，使用斧頭作為武器，擁有優秀的防禦力，但移動速度較慢", [0, 1, 4, 7], 0, 1, 23, 23, 0.55, 10, 0.55, 6, 0.4, 13, 0.5, 7, 0.45, "绯炎大斧", "默靈的專屬武器，一把冒焰的大斧，所到之處寸草不生", 1, [0, 6, 9, 12], "不動如山", "<img src='hardyBearing.png' alt = '不動如山' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75%，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 50% ，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 25% ，則自己與敵人皆無法進行追擊"], 1, "聖盾", "<img src='aegis.png' alt = '聖盾' class='characterSkillSize'>", ["", "受到魔法攻擊時，降低 25% 的傷害", "受到魔法攻擊時，降低 50% 的傷害", "受到魔法攻擊時，降低 75% 的傷害"], 1, "緋炎", "<img src='bonfire.png' alt = '緋炎' class='characterSkillSize'>", ["", "受到敵人攻擊時，防守 + 2", "受到敵人攻擊時，戰鬥中的防守 + 4", "受到敵人攻擊時，戰鬥中的防守 + 6"], 1)
                characterStorage[15][2] = armoredInfantry1

                armoredInfantry2 = new unit("beta", "默靈重裝兵", "<img src='armoredInfantry.png' alt = '敵方重裝兵二' class='characterImgSize'>", "侵略校園的默靈重裝兵，使用斧頭作為武器，擁有優秀的防禦力，但移動速度較慢", [0, 2, 5, 8], 0, 1, 23, 23, 0.55, 10, 0.55, 6, 0.4, 13, 0.5, 7, 0.45, "绯炎大斧", "默靈的專屬武器，一把冒焰的大斧，所到之處寸草不生", 1, [0, 6, 9, 12], "不動如山", "<img src='hardyBearing.png' alt = '不動如山' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75%，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 50% ，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 25% ，則自己與敵人皆無法進行追擊"], 1, "聖盾", "<img src='aegis.png' alt = '聖盾' class='characterSkillSize'>", ["", "受到魔法攻擊時，降低 25% 的傷害", "受到魔法攻擊時，降低 50% 的傷害", "受到魔法攻擊時，降低 75% 的傷害"], 1, "緋炎", "<img src='bonfire.png' alt = '緋炎' class='characterSkillSize'>", ["", "受到敵人攻擊時，防守 + 2", "受到敵人攻擊時，戰鬥中的防守 + 4", "受到敵人攻擊時，戰鬥中的防守 + 6"], 1)
                characterStorage[11][3] = armoredInfantry2

                armoredInfantry3 = new unit("beta", "默靈重裝兵", "<img src='armoredInfantry.png' alt = '敵方重裝兵三' class='characterImgSize'>", "侵略校園的默靈重裝兵，使用斧頭作為武器，擁有優秀的防禦力，但移動速度較慢", [0, 2, 5, 8], 0, 1, 23, 23, 0.55, 10, 0.55, 6, 0.4, 13, 0.5, 7, 0.45, "绯炎大斧", "默靈的專屬武器，一把冒焰的大斧，所到之處寸草不生", 1, [0, 6, 9, 12], "不動如山", "<img src='hardyBearing.png' alt = '不動如山' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75%，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 50% ，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 25% ，則自己與敵人皆無法進行追擊"], 1, "聖盾", "<img src='aegis.png' alt = '聖盾' class='characterSkillSize'>", ["", "受到魔法攻擊時，降低 25% 的傷害", "受到魔法攻擊時，降低 50% 的傷害", "受到魔法攻擊時，降低 75% 的傷害"], 1, "緋炎", "<img src='bonfire.png' alt = '緋炎' class='characterSkillSize'>", ["", "受到敵人攻擊時，防守 + 2", "受到敵人攻擊時，戰鬥中的防守 + 4", "受到敵人攻擊時，戰鬥中的防守 + 6"], 1)
                characterStorage[10][7] = armoredInfantry3

                armoredInfantry4 = new unit("beta", "默靈重裝兵", "<img src='armoredInfantry.png' alt = '敵方重裝兵四' class='characterImgSize'>", "侵略校園的默靈重裝兵，使用斧頭作為武器，擁有優秀的防禦力，但移動速度較慢", [0, 4, 7, 9], 0, 1, 23, 23, 0.55, 10, 0.55, 6, 0.4, 13, 0.5, 7, 0.45, "绯炎大斧", "默靈的專屬武器，一把冒焰的大斧，所到之處寸草不生", 1, [0, 6, 9, 12], "不動如山", "<img src='hardyBearing.png' alt = '不動如山' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75%，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 50% ，則自己與敵人皆無法進行追擊", "受到敵人攻擊時，若自身HP高於 25% ，則自己與敵人皆無法進行追擊"], 1, "聖盾", "<img src='aegis.png' alt = '聖盾' class='characterSkillSize'>", ["", "受到魔法攻擊時，降低 25% 的傷害", "受到魔法攻擊時，降低 50% 的傷害", "受到魔法攻擊時，降低 75% 的傷害"], 1, "緋炎", "<img src='bonfire.png' alt = '緋炎' class='characterSkillSize'>", ["", "受到敵人攻擊時，防守 + 2", "受到敵人攻擊時，戰鬥中的防守 + 4", "受到敵人攻擊時，戰鬥中的防守 + 6"], 1)
                characterStorage[2][7] = armoredInfantry4

                cavalry1 = new unit("beta", "默靈騎兵", "<img src='cavalry.png' alt = '敵方騎兵一' class='characterImgSize'>", "侵略校園的默靈騎兵，使用槍作為武器，機動性高", [0, 3, 6, 9], 0, 3, 22, 22, 0.45, 10, 0.5, 10, 0.4, 7, 0.4, 7, 0.4, "風火飛舞的靈槍", "默靈的專屬武器，能召喚颶風", 1, [0, 6, 9, 12], "衝敵斬", "<img src='lunge.png' alt = '衝敵斬' class='characterSkillSize'>", ["", "由自己發動攻擊時，若自身HP高於 25%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 50%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 75%，則敵人攻擊 - 5"], 1, "回擊", "<img src='riptose.png' alt = '回擊' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 50% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 25% 時，則必定可進行追擊"], 1, "同歸於盡", "<img src='desperation.png' alt = '同歸於盡' class='characterSkillSize'>", ["", "戰鬥中，若自身 HP 低於 25%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 50%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 75%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防"], 1)
                characterStorage[7][8] = cavalry1

                cavalry2 = new unit("beta", "默靈騎兵", "<img src='cavalry.png' alt = '敵方騎兵二' class='characterImgSize'>", "侵略校園的默靈騎兵，使用槍作為武器，機動性高", [0, 4, 7, 9], 0, 3, 22, 22, 0.45, 10, 0.5, 10, 0.4, 7, 0.4, 7, 0.4, "風火飛舞的靈槍", "默靈的專屬武器，能召喚颶風", 1, [0, 2, 5, 8], "衝敵斬", "<img src='lunge.png' alt = '衝敵斬' class='characterSkillSize'>", ["", "由自己發動攻擊時，若自身HP高於 25%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 50%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 75%，則敵人攻擊 - 5"], 1, "回擊", "<img src='riptose.png' alt = '回擊' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 50% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 25% 時，則必定可進行追擊"], 1, "同歸於盡", "<img src='desperation.png' alt = '同歸於盡' class='characterSkillSize'>", ["", "戰鬥中，若自身 HP 低於 25%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 50%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 75%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防"], 1)
                characterStorage[10][4] = cavalry2

                cavalry3 = new unit("beta", "默靈騎兵", "<img src='cavalry.png' alt = '敵方騎兵三' class='characterImgSize'>", "侵略校園的默靈騎兵，使用槍作為武器，機動性高", [0, 3, 6, 9], 0, 3, 22, 22, 0.45, 10, 0.5, 10, 0.4, 7, 0.4, 7, 0.4, "風火飛舞的靈槍", "默靈的專屬武器，能召喚颶風", 1, [0, 6, 9, 12], "衝敵斬", "<img src='lunge.png' alt = '衝敵斬' class='characterSkillSize'>", ["", "由自己發動攻擊時，若自身HP高於 25%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 50%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 75%，則敵人攻擊 - 5"], 1, "回擊", "<img src='riptose.png' alt = '回擊' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 50% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 25% 時，則必定可進行追擊"], 1, "同歸於盡", "<img src='desperation.png' alt = '同歸於盡' class='characterSkillSize'>", ["", "戰鬥中，若自身 HP 低於 25%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 50%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 75%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防"], 1)
                characterStorage[6][8] = cavalry3

                cavalry4 = new unit("beta", "默靈騎兵", "<img src='cavalry.png' alt = '敵方騎兵四' class='characterImgSize'>", "侵略校園的默靈騎兵，使用槍作為武器，機動性高", [0, 4, 7, 9], 0, 3, 22, 22, 0.45, 10, 0.5, 10, 0.4, 7, 0.4, 7, 0.4, "風火飛舞的靈槍", "默靈的專屬武器，能召喚颶風", 1, [0, 6, 9, 12], "衝敵斬", "<img src='lunge.png' alt = '衝敵斬' class='characterSkillSize'>", ["", "由自己發動攻擊時，若自身HP高於 25%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 50%，則敵人攻擊 - 5", "由自己發動攻擊時，若自身HP高於 75%，則敵人攻擊 - 5"], 1, "回擊", "<img src='riptose.png' alt = '回擊' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 50% 時，則必定可進行追擊", "受到敵人攻擊時，若自身HP高於 25% 時，則必定可進行追擊"], 1, "同歸於盡", "<img src='desperation.png' alt = '同歸於盡' class='characterSkillSize'>", ["", "戰鬥中，若自身 HP 低於 25%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 50%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防", "戰鬥中，若自身 HP 低於 75%，以 50% 的攻擊額外攻擊一次，本次攻擊無視敵方防守及魔防"], 1)
                characterStorage[0][8] = cavalry4

                longbowman1 = new unit("beta", "默靈弓箭手", "<img src='longbowman.png' alt = '敵方弓箭手一' class='characterImgSize'>", "侵略校園的默靈弓箭手，使用弓作為武器，可以攻擊較遠的敵人", [0, 1, 4, 7], 0, 2, 19, 19, 0.4, 7, 0.4, 9, 0.55, 5, 0.3, 9, 0.55, "默靈的鍊弓", "默靈的專屬武器，曾以這把弓擊敗聖戰士烏勒爾", 2, [0, 6, 9, 12], "華炎", "<img src='ignis.png' alt = '華炎' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 30%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 50%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 80%"], 1, "靜謐", "<img src='silence.png' alt = '靜謐' class='characterSkillSize'>", ["", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 5 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 3 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人時，敵方無法反擊"], 1, "憤怒", "<img src='wrath.png' alt = '憤怒' class='characterSkillSize'>", ["", "戰鬥開始時，若自身HP低於 25%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 50%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 75%, 則造成的傷害 + 10"], 1)
                characterStorage[14][3] = longbowman1

                longbowman2 = new unit("beta", "默靈弓箭手", "<img src='longbowman.png' alt = '敵方弓箭手二' class='characterImgSize'>", "侵略校園的默靈弓箭手，使用弓作為武器，可以攻擊較遠的敵人", [0, 1, 4, 7], 0, 2, 19, 19, 0.4, 7, 0.4, 9, 0.55, 5, 0.3, 9, 0.55, "默靈的鍊弓", "默靈的專屬武器，曾以這把弓擊敗聖戰士烏勒爾", 2, [0, 6, 9, 12], "華炎", "<img src='ignis.png' alt = '華炎' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 30%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 50%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 80%"], 1, "靜謐", "<img src='silence.png' alt = '靜謐' class='characterSkillSize'>", ["", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 5 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 3 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人時，敵方無法反擊"], 1, "憤怒", "<img src='wrath.png' alt = '憤怒' class='characterSkillSize'>", ["", "戰鬥開始時，若自身HP低於 25%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 50%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 75%, 則造成的傷害 + 10"], 1)
                characterStorage[13][3] = longbowman2

                longbowman3 = new unit("beta", "默靈弓箭手", "<img src='longbowman.png' alt = '敵方弓箭手三' class='characterImgSize'>", "侵略校園的默靈弓箭手，使用弓作為武器，可以攻擊較遠的敵人", [0, 4, 7, 9], 0, 2, 19, 19, 0.4, 7, 0.4, 9, 0.55, 5, 0.3, 9, 0.55, "默靈的鍊弓", "默靈的專屬武器，曾以這把弓擊敗聖戰士烏勒爾", 2, [0, 6, 9, 12], "華炎", "<img src='ignis.png' alt = '華炎' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 30%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 50%", "由自己發動攻擊時，戰鬥中的攻擊增加自身防守的 80%"], 1, "靜謐", "<img src='silence.png' alt = '靜謐' class='characterSkillSize'>", ["", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 5 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人 3 以上時，則敵方無法反擊", "由自己發動攻擊時，自己無法追擊，若自己速度高於敵人時，敵方無法反擊"], 1, "憤怒", "<img src='wrath.png' alt = '憤怒' class='characterSkillSize'>", ["", "戰鬥開始時，若自身HP低於 25%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 50%, 則造成的傷害 + 10", "戰鬥開始時，若自身HP低於 75%, 則造成的傷害 + 10"], 1)
                characterStorage[2][5] = longbowman3

                sorcerer1 = new unit("beta", "默靈魔刃", "<img src='sorcerer.png' alt = '敵方魔刃一' class='characterImgSize'>", "侵略校園的默靈魔刃，使用黑魔法作為武器，以敵人的魔防計算傷害", [0, 2, 5, 8], 1, 2, 20, 20, 0.65, 7, 0.45, 6, 0.5, 9, 0.6, 7, 0.5, "絕無之書", "默靈的專屬武器，闇魔道研究學者留下來的咒書，擁有深不可測的魔力", 2, [0, 6, 9, 12], "強化", "<img src='aptitude.png' alt = '強化' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 1", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 2", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 3"], 1, "逆轉", "<img src='reverse.png' alt = '逆轉' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 50% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 25% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害"], 1, "蛇毒", "<img src='poison.png' alt = '蛇毒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥後給予敵人 4 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 7 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 10 點傷害"], 1)
                characterStorage[10][1] = sorcerer1

                sorcerer2 = new unit("beta", "默靈魔刃", "<img src='sorcerer.png' alt = '敵方魔刃二' class='characterImgSize'>", "侵略校園的默靈魔刃，使用黑魔法作為武器，以敵人的魔防計算傷害", [0, 3, 6, 9], 1, 2, 20, 20, 0.65, 7, 0.45, 6, 0.5, 9, 0.6, 7, 0.5, "絕無之書", "默靈的專屬武器，闇魔道研究學者留下來的咒書，擁有深不可測的魔力", 2, [0, 6, 9, 12], "強化", "<img src='aptitude.png' alt = '強化' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 1", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 2", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 3"], 1, "逆轉", "<img src='reverse.png' alt = '逆轉' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 50% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 25% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害"], 1, "蛇毒", "<img src='poison.png' alt = '蛇毒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥後給予敵人 4 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 7 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 10 點傷害"], 1)
                characterStorage[5][2] = sorcerer2

                sorcerer3 = new unit("beta", "默靈魔刃", "<img src='sorcerer.png' alt = '敵方魔刃三' class='characterImgSize'>", "侵略校園的默靈魔刃，使用黑魔法作為武器，以敵人的魔防計算傷害", [0, 4, 6, 9], 1, 2, 20, 20, 0.65, 7, 0.45, 6, 0.5, 9, 0.6, 7, 0.5, "絕無之書", "默靈的專屬武器，闇魔道研究學者留下來的咒書，擁有深不可測的魔力", 2, [0, 6, 9, 12], "強化", "<img src='aptitude.png' alt = '強化' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 1", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 2", "由自己發動攻擊時，戰鬥中的攻擊、速度 + 3"], 1, "逆轉", "<img src='reverse.png' alt = '逆轉' class='characterSkillSize'>", ["", "受到敵人攻擊時，若自身HP高於 75% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 50% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害", "受到敵人攻擊時，若自身HP高於 25% 時，撤銷敵人的「以敵人防守或魔防中較低者計算傷害」技能，以自身防守或魔防較高者承受傷害"], 1, "蛇毒", "<img src='poison.png' alt = '蛇毒' class='characterSkillSize'>", ["", "由自己發動攻擊時，戰鬥後給予敵人 4 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 7 點傷害", "由自己發動攻擊時，戰鬥後給予敵人 10 點傷害"], 1)
                characterStorage[1][9] = sorcerer3

                monastic1 = new unit("beta", "默靈僧侶", "<img src='monastic.png' alt = '敵方僧侶一' class='characterImgSize'>", "侵略校園的默靈僧侶，使用白魔法作為武器，可以輔助我方單位", [0, 1, 4, 7], 1, 0, 22, 22, 0.5, 7, 0.55, 4, 0.55, 7, 0.5, 9, 0.65, "落雷之符", "默靈的專屬武器，戰神托爾的符咒，對人類真正的強大抱持著敬意", 2, [0, 6, 9, 12], "獻祭", "<img src='sacrifice.png' alt = '獻祭' class='characterSkillSize'>", ["", "我方回合開始時，對 5 格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害， X = 5 格內的敵方單位數量", "我方回合開始時，對5格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害 * 0.5， X = 5 格內的敵方單位數量", "我方回合開始時，對5格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害， X = 5 格內的敵方單位數量 * 1.5"], 1, "附身", "<img src='bless.png' alt = '附身' class='characterSkillSize'>", ["", "戰鬥中的攻擊、速度、防禦、魔防 + 1", "戰鬥中的攻擊、速度、防禦、魔防 + 4", "戰鬥中的攻擊、速度、防禦、魔防 + 7"], 1, "暴雷", "<img src='thunder.png' alt = '暴雷' class='characterSkillSize'>", ["", "造成傷害 + 30%", "造成傷害 + 60%", "造成傷害 + 90%"], 1)
                characterStorage[13][7] = monastic1

                monastic2 = new unit("beta", "默靈僧侶", "<img src='monastic.png' alt = '敵方僧侶二' class='characterImgSize'>", "侵略校園的默靈僧侶，使用白魔法作為武器，可以輔助我方單位", [0, 3, 6, 9], 1, 0, 22, 22, 0.5, 7, 0.55, 4, 0.55, 7, 0.5, 9, 0.65, "落雷之符", "默靈的專屬武器，戰神托爾的符咒，對人類真正的強大抱持著敬意", 2, [0, 6, 9, 12], "獻祭", "<img src='sacrifice.png' alt = '獻祭' class='characterSkillSize'>", ["", "我方回合開始時，對3格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害， X = 5 格內的敵方單位數量", "我方回合開始時，對4格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害， X = 5 格內的敵方單位數量", "我方回合開始時，對5格內的敵方單位造成 X 點傷害，回復5格內的我方單位 X 點傷害， X = 5 格內的敵方單位數量 * 2"], 1, "附身", "<img src='bless.png' alt = '附身' class='characterSkillSize'>", ["", "戰鬥中的攻擊、速度、防禦、魔防 + 1", "戰鬥中的攻擊、速度、防禦、魔防 + 4", "戰鬥中的攻擊、速度、防禦、魔防 + 7"], 1, "暴雷", "<img src='thunder.png' alt = '暴雷' class='characterSkillSize'>", ["", "造成傷害 + 30%", "造成傷害 + 60%", "造成傷害 + 90%"], 1)
                characterStorage[5][6] = monastic2

                terrain = new unit("gamma", "障礙物", "<img src='terrain.png' alt = '障礙物' class='terrain'>", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                for(let i=0;i<20;i++)
                {
                    characterStorage[i][0] = terrain
                }
                characterStorage[0][1] = terrain
                characterStorage[1][1] = terrain
                characterStorage[11][1] = terrain
                characterStorage[12][1] = terrain
                characterStorage[13][1] = terrain
                characterStorage[14][1] = terrain
                characterStorage[17][1] = terrain
                characterStorage[18][1] = terrain
                characterStorage[19][1] = terrain
                characterStorage[0][2] = terrain
                characterStorage[1][2] = terrain
                characterStorage[4][2] = terrain
                characterStorage[8][2] = terrain
                characterStorage[17][2] = terrain
                characterStorage[18][2] = terrain
                characterStorage[19][2] = terrain
                characterStorage[0][3] = terrain
                characterStorage[1][3] = terrain
                characterStorage[4][3] = terrain
                characterStorage[5][3] = terrain
                characterStorage[6][3] = terrain
                characterStorage[7][3] = terrain
                characterStorage[8][3] = terrain
                characterStorage[9][3] = terrain
                characterStorage[15][3] = terrain
                characterStorage[19][3] = terrain
                characterStorage[0][4] = terrain
                characterStorage[1][4] = terrain
                characterStorage[12][4] = terrain
                characterStorage[13][4] = terrain
                characterStorage[14][4] = terrain
                characterStorage[15][4] = terrain
                characterStorage[0][5] = terrain
                characterStorage[4][5] = terrain
                characterStorage[5][5] = terrain
                characterStorage[6][5] = terrain
                characterStorage[7][5] = terrain
                characterStorage[8][5] = terrain
                characterStorage[13][5] = terrain
                characterStorage[14][5] = terrain
                characterStorage[15][5] = terrain
                characterStorage[16][5] = terrain
                characterStorage[2][6] = terrain
                characterStorage[3][6] = terrain
                characterStorage[4][6] = terrain
                characterStorage[4][6] = terrain
                characterStorage[8][6] = terrain
                characterStorage[9][6] = terrain
                characterStorage[13][6] = terrain
                characterStorage[14][6] = terrain
                characterStorage[3][7] = terrain
                characterStorage[4][7] = terrain
                characterStorage[12][8] = terrain
                characterStorage[13][8] = terrain
                characterStorage[14][8] = terrain
                characterStorage[15][8] = terrain
                characterStorage[18][8] = terrain
                characterStorage[19][8] = terrain
                for(let i=3;i<20;i++)
                {
                    characterStorage[i][9] = terrain
                }



                document.getElementById("body").setAttribute("style","background-image: url(neturalBackground01.png); background-size: 2000px 1040px;")
                for(let i=0;i<10;i++)
                {
                    board+="<tr>"
                    for(let j=0;j<20;j++)
                    {
                        if(characterStorage[j][i]!=undefined) board+="<td id='cell"+j+i+"' onclick='selected("+j+","+i+")'>"+characterStorage[j][i].unitIcon+"</td>"
                        else board+="<td id='cell"+j+i+"' onclick='selected("+j+","+i+")'></td>"
                    }
                    board+="</tr>"
                }
                board+="</table>"
                board+="<div id='turn' class='turnPanel'>我方回合 剩餘可行動單位 : 6</div>"
                board+="<div class='characterInfoPanel'>攻擊方<br><div id='attackerIcon' class='panelDetail'></div><div id='attackerState' class='panelDetail'></div><div id='attackerSkill' class='panelDetail'></div></div>"
                board+="<div class='characterInfoPanel'>防守方<br><div id='defenderIcon' class='panelDetail'></div><div id='defenderState' class='panelDetail'></div><div id='defenderSkill' class='panelDetail'></div></div>"
                document.getElementById("display").innerHTML=board
                allyAliveUnit=6
                enemyAliveUnit=20
                playerAction=allyAliveUnit
                console.log("難度 : "+difficulty)
                stateGenerateAlly(summoner, difficulty)
                stateGenerateAlly(heavyInfantry, difficulty)
                stateGenerateAlly(knight, difficulty)
                stateGenerateAlly(archer, difficulty)
                stateGenerateAlly(mage, difficulty)
                stateGenerateAlly(monk, difficulty)
                stateGenerateBoss(boss, difficulty)
                stateGenerateEnemy(assassin1, difficulty)
                stateGenerateEnemy(assassin2, difficulty)
                stateGenerateEnemy(assassin3, difficulty)
                stateGenerateEnemy(armoredInfantry1, difficulty)
                stateGenerateEnemy(armoredInfantry2, difficulty)
                stateGenerateEnemy(armoredInfantry3, difficulty)
                stateGenerateEnemy(armoredInfantry4, difficulty)
                stateGenerateEnemy(cavalry1, difficulty)
                stateGenerateEnemy(cavalry2, difficulty)
                stateGenerateEnemy(cavalry3, difficulty)
                stateGenerateEnemy(cavalry4, difficulty)
                stateGenerateEnemy(longbowman1, difficulty)
                stateGenerateEnemy(longbowman2, difficulty)
                stateGenerateEnemy(longbowman3, difficulty)
                stateGenerateEnemy(sorcerer1, difficulty)
                stateGenerateEnemy(sorcerer2, difficulty)
                stateGenerateEnemy(sorcerer3, difficulty)
                stateGenerateEnemy(monastic1, difficulty)
                stateGenerateEnemy(monastic2, difficulty)
            }

            function end(n)
            {
                if(n)
                {
                    document.getElementById("body").setAttribute("style","background-color: gold")
                    document.getElementById("display").innerHTML="<div class='text'>勝利</div><br><input type='button' id='againButton' value='重新開始' class='button'>"
                }
                else
                {
                    document.getElementById("body").setAttribute("style","background-color: red")
                    document.getElementById("display").innerHTML="<div class='text'>戰敗</div><br><input type='button' id='againButton' value='重新開始' class='button'>"
                }
                document.getElementById("againButton").addEventListener("click",game,false)
            }

            function selected(x,y)
            {
                if(selectedFlag&&document.getElementById("cell"+x+y).innerHTML!=""&&(characterStorage[x][y].moveActionPoint||characterStorage[x][y].attackActionPoint)&&playerAction>0)
                {
                    characterX=x
                    characterY=y
                    selectedFlag=0
                    for(let i=0;i<10;i++)
                    {
                        for(let j=0;j<20;j++)
                        {             
                            if((Math.abs(x-j)+Math.abs(y-i))<=characterStorage[characterX][characterY].weaponRange&&characterStorage[j][i]==undefined&&characterStorage[characterX][characterY].attackActionPoint)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(241,130,141,0.5)")
                            }
                            if((Math.abs(x-j)+Math.abs(y-i))<=characterStorage[characterX][characterY].mobility&&characterStorage[j][i]==undefined&&characterStorage[characterX][characterY].moveActionPoint)
                            {                            
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(25,181,254,0.5)")
                            }
                            if((Math.abs(x-j)+Math.abs(y-i))<=characterStorage[characterX][characterY].weaponRange&&characterStorage[j][i]!=undefined&&characterStorage[j][i].side!=characterStorage[characterX][characterY].side&&characterStorage[characterX][characterY].attackActionPoint&&characterStorage[j][i].side=="beta")
                            {                            
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(255,0,0,0.5)")
                            }
                        }
                    }
                    if(characterStorage[x][y].moveActionPoint||characterStorage[x][y].attackActionPoint)
                    {
                        document.getElementById("cell"+x+y).setAttribute("style","background-color: rgba(1,1,122,0.7)")
                    }                    
                }
                else if(!selectedFlag&&(characterStorage[characterX][characterY].moveActionPoint||characterStorage[characterX][characterY].attackActionPoint)&&playerAction>0)
                {         
                    if(characterStorage[characterX][characterY].side=="beta")    
                    {
                        if(characterStorage[x][y]!=undefined)
                        {
                            selectedFlag=1
                            for(let i=0;i<10;i++)
                            {
                                for(let j=0;j<20;j++)
                                {             
                                    if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].weaponRange)
                                    {
                                        document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                                    }
                                    if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].mobility)
                                    {                            
                                        document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                                    }
                                }
                            }
                            selected(x,y)
                        }
                    }       
                    else
                    {
                        if((Math.abs(characterX-x)+Math.abs(characterY-y))<=characterStorage[characterX][characterY].mobility&&(Math.abs(characterX-x)+Math.abs(characterY-y))!=0&&characterStorage[x][y]==undefined&&characterStorage[characterX][characterY].moveActionPoint)
                        {
                            move(x,y)
                        }
                        else if((Math.abs(characterX-x)+Math.abs(characterY-y))<=characterStorage[characterX][characterY].weaponRange&&(Math.abs(characterX-x)+Math.abs(characterY-y))!=0&&characterStorage[x][y].side=="beta"&&characterStorage[characterX][characterY].attackActionPoint)
                        {                        
                            attack(x,y)
                        }
                    }
                }
            }

            function move(x,y)
            {
                let checkEnemy=0
                if(characterStorage[characterX][characterY].attackActionPoint)
                {
                    document.getElementById("cell"+x+y).innerHTML=characterStorage[characterX][characterY].unitIcon
                    document.getElementById("cell"+characterX+characterY).innerHTML=""
                    characterStorage[characterX][characterY].moveActionPoint--
                    characterStorage[x][y]=characterStorage[characterX][characterY]
                    characterStorage[characterX][characterY]=undefined
                    for(let i=0;i<10;i++)
                    {
                        for(let j=0;j<20;j++)
                        {             
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[x][y].mobility)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                            }
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[x][y].weaponRange)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                            }
                            if((Math.abs(x-j)+Math.abs(y-i))==characterStorage[x][y].weaponRange&&characterStorage[j][i]==undefined)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(241,130,141,0.5)")
                            }
                            if((Math.abs(x-j)+Math.abs(y-i))==characterStorage[x][y].weaponRange&&characterStorage[j][i]!=undefined&&characterStorage[j][i].side=="beta")
                            {                            
                                checkEnemy++
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(255,0,0,0.5)")
                            }
                        }
                    }
                    document.getElementById("cell"+x+y).setAttribute("style","background-color: rgba(1,1,122,0.7)")
                    characterX=x
                    characterY=y
                    if(!checkEnemy)
                    {
                        setTimeout(function()
                        {
                            selectedFlag=1
                            characterStorage[characterX][characterY].attackActionPoint--
                            for(let i=0;i<10;i++)
                            {
                                for(let j=0;j<20;j++)
                                {             
                                    if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[x][y].weaponRange)
                                    {
                                        document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                                    }
                                }
                            }
                        },1000)
                        playerAction--
                        document.getElementById("turn").innerHTML="你的回合 剩餘可行動單位 : "+playerAction
                        if(playerAction<=0) setTimeout(function(){enemyTurn()},1000) 
                    }                    
                }
                else
                {
                    for(let i=0;i<10;i++)
                    {
                        for(let j=0;j<20;j++)
                        {             
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].mobility)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                            }
                        }
                    }
                    document.getElementById("cell"+x+y).innerHTML=characterStorage[characterX][characterY].unitIcon
                    document.getElementById("cell"+characterX+characterY).innerHTML=""
                    characterStorage[characterX][characterY].moveActionPoint--
                    characterStorage[x][y]=characterStorage[characterX][characterY]
                    characterStorage[characterX][characterY]=undefined
                    selectedFlag=1
                    playerAction--
                    document.getElementById("turn").innerHTML="你的回合 剩餘可行動單位 : "+playerAction
                    if(playerAction<=0) setTimeout(function(){enemyTurn()},1000)
                }
            }

            function attack(x,y)
            {
                if(characterStorage[characterX][characterY].moveActionPoint)
                {
                    //初始化 attacker 角色數據
                    attacker = characterStorage[characterX][characterY]
                    attackerNAME = attacker.unitName
                    attackerHP = attacker.hitPoint
                    attackerATK = attacker.damage
                    attackerSPD = attacker.speed
                    attackerDEF = attacker.defense
                    attackerRES = attacker.resistance
                    //初始化 defender 角色數據
                    defender = characterStorage[x][y]
                    defenderNAME = defender.unitName
                    defenderHP = defender.hitPoint
                    defenderATK = defender.damage
                    defenderSPD = defender.speed
                    defenderDEF = defender.defense
                    defenderRES = defender.resistance
                    //宣告攻擊開始
                    console.log(attackerNAME + " 對 " + defenderNAME + " 發動攻擊")
                    //技能前數值 log 顯示
                    /*
                    console.log("上技能之前的數值")
                    console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                    console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                    console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                    console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                    console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                    console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                    console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                    console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                    console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                    console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                    */

                    //attacker 的技能
                    if(attacker.skill2Name == "破防擊" && attacker.skill2Level > 0){
                        debuffDEF = Math.floor(defenderDEF * (0.1 + attacker.skill2Level * 0.2))
                        debuffRES = Math.floor(defenderRES * (0.1 + attacker.skill2Level * 0.2))
                        defenderDEF -= debuffDEF
                        defenderRES -= debuffRES
                        console.log(attackerNAME + " 透過技能 破防擊（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 防守 - " + debuffDEF + " 魔防 - " + debuffRES)
                    }

                    if(attacker.skill3Name == "尊嚴" && attacker.skill3Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill3Level)){
                            buffATK = 2 * attacker.skill3Level
                            buffDEF = 2 * attacker.skill3Level
                            attackerATK += buffATK
                            attackerDEF += buffDEF
                            console.log(attackerNAME + " 透過技能 尊嚴（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK + " 防守 + " + buffDEF)
                        }
                        else{
                            debuffATK = 7
                            debuffDEF = 7
                            attackerATK -= debuffATK
                            attackerDEF -= debuffDEF
                            console.log(attackerNAME + " 透過技能 尊嚴（" + attacker.skill3Description[attacker.skill3Level] + "）降低 攻擊 - " + debuffATK + " 防守 - " + debuffATK)
                        }
                    }
                    
                    if(attacker.skill1Name == "衝敵斬" && attacker.skill1Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill1Level)){
                            debuffATK = 5
                            defenderATK -= debuffATK
                            console.log(attackerNAME + " 透過技能 衝敵斬（" + attacker.skill1Description[attacker.skill1Level] + "）使 " + defenderNAME + " 攻擊 - " + debuffATK)
                        }
                    }

                    if(attacker.skill1Name == "覺醒" && attacker.skill1Level > 0)
                    {
                        buffSPD = attacker.skill1Level * 2
                        attackerSPD += buffSPD
                        console.log(attackerNAME + " 透過技能 覺醒（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 速度 + " + buffSPD)
                    }

                    if(attacker.skill1Name == "冰河" && attacker.skill1Level > 0)
                    {
                        buffRES = Math.floor(attackerRES * (0.1 + attacker.skill1Level * 0.2))
                        attackerATK += buffRES
                        console.log(attackerNAME + " 透過技能 冰河（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 魔防 + " + buffRES)
                    }

                    if(attacker.skill2Name == "生命的代價" && attacker.skill2Level > 0)
                    {
                        buff = attacker.skill2Level
                        attackerATK += buff
                        attackerSPD += buff
                        attackerDEF += buff
                        attackerRES += buff
                        console.log(attackerNAME + " 透過技能 生命的代價（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                    }

                    if(attacker.skill3Name == "憤怒" && attacker.skill3Level > 0)
                    {
                        if(attackerHP <= attacker.hitPointMaxium * (0.25 * attacker.skill3Level)){
                                buffATK = 10
                                attackerATK += buffATK
                                console.log(attackerNAME + " 透過技能 憤怒（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                            }
                    }

                    if(attacker.skill3Name == "完美" && attacker.skill3Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill3Level)){
                            buffSPD = 2 * attacker.skill3Level
                            buffRES = 2 * attacker.skill3Level
                            attackerSPD += buffSPD
                            attackerRES += buffRES
                            console.log(attackerNAME + " 透過技能 完美（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 速度 + " + buffSPD + " 魔防 + " + buffRES)
                        }
                        else{
                            debuffSPD = 7
                            debuffRES = 7
                            attackerATK -= debuffSPD
                            attackerRES -= debuffRES
                            console.log(attackerNAME + " 透過技能 完美（" + attacker.skill3Description[attacker.skill3Level] + "）降低 速度 - " + debuffSPD + " 魔防 - " + debuffRES)
                        }
                    }

                    //defender 的技能
                    if(defender.skill1Name == "渾沌學")
                    {
                        buffATK = Math.floor(defenderATK * defender.skill1Level * 0.2)
                        defenderATK += buffATK
                        console.log(defenderNAME + " 透過技能 渾沌學（" + defender.skill1Description[defender.skill1Level] + "）獲得 攻擊 + " + buffATK)
                    }

                    if(defender.skill3Name == "緋炎")
                    {
                        buffDEF = defender.skill3Level * 2
                        defenderDEF += buffDEF
                        console.log(defenderNAME + " 透過技能 緋炎（" + defender.skill3Description[defender.skill3Level] + "）獲得 防守 + " + buffDEF)
                    }

                    if(defender.skill3Name == "憤怒")
                    {
                        if(defenderHP <= defender.hitPointMaxium * (0.25 * defender.skill3Level)){
                                buffATK = 10
                                defenderATK += buffATK
                                console.log(defenderNAME + " 透過技能 憤怒（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                            }
                    }

                    if(defender.skill2Name == "附身")
                    {
                        buff = defender.skill2Level * 3 - 2
                        defenderATK += buff
                        defenderSPD += buff
                        defenderDEF += buff
                        defenderRES += buff
                        console.log(defenderNAME + " 透過技能 附身（" + defender.skill2Description[defender.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                    }

                    if(defender.skill3Name == "暴雷")
                    {
                        buffATK = Math.floor(defenderATK * defender.skill3Level * 0.3)
                        defenderATK += buffATK
                        console.log(defenderNAME + " 透過技能 暴雷（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                    }

                    //戰鬥前數值 log 顯示
                    /*
                    console.log("上技能之後的數值")
                    console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                    console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                    console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                    console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                    console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                    console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                    console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                    console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                    console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                    console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                    */


                    //戰鬥前的技能

                    if(attacker.weaponName == "斬裂劍"){
                        if(defenderDEF > defenderRES){
                            attackingTrueDefRes = defenderRES
                            console.log(attackerNAME + " 透過武器 斬裂劍（" + attacker.weaponDescripton + "）以 " + defenderNAME + " 的 魔防 計算傷害")
                        }
                        else{
                            attackingTrueDefRes = defenderDEF
                            //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                        }
                    }
                    else if(attacker.weaponAttribute == 0){
                        attackingTrueDefRes = defenderDEF
                        //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                    }
                    else if(attacker.weaponAttribute == 1){
                        attackingTrueDefRes = defenderRES
                        //console.log(attackerNAME + " 以 " + defenderNAME + " 的 魔防 計算傷害")
                    }

                    if(defender.skill2Name == "逆轉" && defenderHP >= defender.hitPointMaxium * (0.25 * defender.skill2Level)){
                        if(attackingTrueDefRes = defenderRES && defenderDEF > defenderRES){
                            attackingTrueDefRes = defenderDEF
                            console.log(defenderNAME + " 透過技能 逆轉（" + defender.skill2Description[defender.skill2Level] + "）以自身的 防守 承受傷害")
                        }
                        else{
                            attackingTrueDefRes = defenderRES
                            console.log(defenderNAME + " 透過技能 逆轉（" + defender.skill2Description[defender.skill2Level] + "）以自身的 魔防 承受傷害")
                        }
                    }
                    if(defender.weaponAttribute == 0){
                        defendingTrueDefRes = attackerDEF
                        //console.log(defenderNAME + " 以 " + attackerNAME + " 的 防守 計算傷害")
                    }
                    else if(defender.weaponAttribute == 1){
                        defendingTrueDefRes = attackerRES
                        //console.log(defenderNAME + " 以 " + attackerNAME + " 的 魔防 計算傷害")
                    }

                    attackerFollowUp = 0
                    defenderFollowUp = 0
                    if(attackerSPD > defenderSPD + 5){
                        attackerFollowUp +=1
                        console.log(attackerNAME + " 因為速度高於敵人 5 以上，可以追擊")
                    }
                    if(defenderSPD > attackerSPD + 5){
                        defenderFollowUp +=1
                        console.log(defenderNAME + " 因為速度高於敵人 5 以上，可以追擊")
                    }

                    if(defender.skill2Name == "回擊" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill2Level)){
                        defenderFollowUp += 1
                        console.log(defenderNAME + " 透過技能 回擊（" + defender.skill2Description[defender.skill2Level] + "）獲得 反手追擊")
                    }

                    attackingTrueDamage = attackerATK - attackingTrueDefRes
                    if(attackingTrueDamage < 0) attackingTrueDamage = 0
                    //console.log(attackerNAME + " 對 " + defenderNAME + " 會造成 " + attackingTrueDamage + " 點傷害")
                    defendingTrueDamage = defenderATK - defendingTrueDefRes
                    if(defendingTrueDamage < 0) defendingTrueDamage = 0
                    //console.log(defenderNAME + " 對 " + attackerNAME + " 會造成 " + defendingTrueDamage + " 點傷害")

                    

                    if(defender.skill1Name == "不動如山" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill1Level)){
                        attackerFollowUp = 0
                        defenderFollowUp = 0
                        console.log(defenderNAME + " 透過技能 不動如山（" + defender.skill1Description[defender.skill1Level] + "）使自己與敵人皆無法進行追擊")
                    }

                    if(attacker.skill3Name == "靜謐" ){
                        attackerFollowUp = 0
                        if(attackerSPD >= defenderSPD + (-1 + 2 * attacker.skill3Level)){
                            defendingTrueDamage = 0
                            console.log(attackerNAME + " 透過技能 靜謐（" + attacker.skill3Description[attacker.skill3Level] + "）使 " + defenderNAME + " 無法反擊")
                        }
                    }
                    
                    if(attacker.weaponRange != defender.weaponRange){
                        defendingTrueDamage = 0
                        //console.log(defenderNAME + " 無法反擊")
                    }

                    if(defender.skill2Name == "反擊" && defender.skill2Level >= 2){
                        defendingTrueDamage = defenderATK - defendingTrueDefRes
                        console.log(defenderNAME + " 透過技能 反擊（" + defender.skill3Description[defender.skill3Level] + "）撤銷 自身無法反擊")
                    }

                    if(defender.skill3Name == "隱匿" && attacker.weaponAttribute == 0){
                        debuff = Math.floor(attackingTrueDamage * 0.25 * defender.skill3Level)
                        attackingTrueDamage -= debuff
                        console.log(defenderNAME + " 透過技能 隱匿（" + defender.skill3Description[defender.skill3Level] + "）降低 " + debuff + " 點傷害")
                    }

                    if(defender.skill2Name == "聖盾" && attacker.weaponAttribute == 1){
                        debuff = Math.floor(attackingTrueDamage * 0.25 * defender.skill2Level)
                        attackingTrueDamage -= debuff
                        console.log(defenderNAME + " 透過技能 聖盾（" + defender.skill2Description[defender.skill2Level] + "）降低 " + debuff + " 點傷害")
                    }

                    //戰鬥中的技能
                    console.log("攻擊前：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)

                    //attacker 攻擊
                    defenderHP -= attackingTrueDamage

                    if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                        defenderHP = 1
                        console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                        defenderattacker.skill1Level = 0
                    }

                    if(attacker.skill2Name == "奉獻"){
                        buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                        attackerHP += buff
                        overload = attackerHP - attacker.hitPointMaxium
                        if(overload >= 0){
                            attackerHP = attacker.hitPointMaxium
                            buff -= overload    
                        }
                        console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                    }
                    console.log(attackerNAME + " 對 " + defenderNAME + " 造成 " + attackingTrueDamage + " 點傷害 ") 

                    //defender 反擊
                    if(defenderHP > 0){
                        attackerHP -= defendingTrueDamage

                        if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                            debuff = Math.floor(defenderATK * 0.5)
                            defenderATK * 0.5
                            attackerHP -= debuff
                            console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                        }
                        console.log(defenderNAME + " 對 " + attackerNAME + " 造成 " + defendingTrueDamage + " 點傷害 ")
                    }
                    

                    //attacker 追擊
                    if(attackerFollowUp == 1 && attackerHP > 0){
                        defenderHP -= attackingTrueDamage

                        defenderHP -= attackingTrueDamage
                        if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                            defenderHP = 1
                            console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                            defenderattacker.skill1Level = 0
                        }

                        if(attacker.skill2Name == "奉獻"){
                            buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                            attackerHP += buff
                            overload = attackerHP - attacker.hitPointMaxium
                            if(overload >= 0){
                                attackerHP = attacker.hitPointMaxium
                                buff -= overload    
                            }
                            console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                        }
                        console.log(attackerNAME + " 對 " + defenderNAME + " 追擊 " + attackingTrueDamage + " 點傷害 ") 
                    }
                    

                    //defender 反擊
                    if(defenderFollowUp == 1 && defenderHP > 0){
                        attackerHP -= defendingTrueDamage

                        if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                            debuff = defenderATK * 0.5
                            attackerHP -= debuff
                            console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                        }

                        console.log(defenderNAME + " 對 " + attackerNAME + " 追擊 " + defendingTrueDamage + " 點傷害 ")
                    }

                    characterStorage[characterX][characterY].hitPoint = attackerHP
                    characterStorage[x][y].hitPoint = defenderHP

                    //戰鬥後的技能
                    if(defender.skill3Name == "復甦" && defenderHP > 0){
                        buff = -2 + 4 * defender.skill3Level
                        defenderHP += buff
                        if(defenderHP > defender.hitPointMaxium[difficulty]){
                            overload = defenderHP - defender.hitPointMaxium[difficulty]
                            defenderHP = defender.hitPointMaxium[difficulty]
                            buff -= overload
                        }
                        console.log(defenderNAME + " 透過技能 復甦（" + defender.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                    }

                    if(attacker.skill3Name == "復甦" && attackerHP > 0 && attacker.skill3Level > 0){
                        buff = -2 + 4 * attacker.skill3Level
                        attackerHP += buff
                        if(attackerHP > attacker.hitPointMaxium[difficulty]){
                            overload = attackerHP - attacker.hitPointMaxium[difficulty]
                            attackerHP = attacker.hitPointMaxium[difficulty]
                            buff -= overload
                        }
                        console.log(attackerNAME + " 透過技能 復甦（" + attacker.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                    }


                    if(attacker.skill2Name == "蛇毒" && attackerHP > 0 && attacker.skill2Level > 0){
                        debuff = 1 + 3 * attacker.skill2Level
                        if(defenderHP < debuff){
                            defenderHP = 1
                            debuff = defenderHP - 1
                        }
                        else defenderHP -= debuff
                        console.log(attackerNAME + " 透過技能 蛇毒（" + attacker.skill2Description[attacker.skill2Level] + "）在戰鬥後對 " + defenderNAME + " 造成 " + debuff + " 點傷害")
                    }

                    if(attacker.skill3Name == "生命的代價" && attackerHP > 0 && attacker.skill2Level > 0)
                    {
                        debuff = 2 * attacker.skill2Level
                        if(attackerHP < debuff){
                            attackerHP = 1
                            debuff = attackerHP - 1
                        }
                        else attackerHP -= debuff
                        console.log(attackerNAME + " 在戰鬥後，因為技能 生命的代價（" + attacker.skill3Description[attacker.skill3Level] + "）而喪失 HP " + debuff)
                    }

                    characterStorage[characterX][characterY].hitPoint = attackerHP
                    characterStorage[x][y].hitPoint = defenderHP
                    console.log("攻擊後：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)
                    //這裡結束           
                    updateInfoPanel(characterX,characterY,x,y)

                    checkAlive(characterX,characterY,x,y)
                    for(let i=0;i<10;i++)
                    {
                        for(let j=0;j<20;j++)
                        {             
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].weaponRange)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                            }
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].mobility&&characterStorage[j][i]==undefined)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: rgba(25,181,254,0.5)")
                            }
                        }
                    }           
                    characterStorage[characterX][characterY].attackActionPoint--
                }
                else
                {
                    //初始化 attacker 角色數據
                    attacker = characterStorage[characterX][characterY]
                    attackerNAME = attacker.unitName
                    attackerHP = attacker.hitPoint
                    attackerATK = attacker.damage
                    attackerSPD = attacker.speed
                    attackerDEF = attacker.defense
                    attackerRES = attacker.resistance
                    //初始化 defender 角色數據
                    defender = characterStorage[x][y]
                    defenderNAME = defender.unitName
                    defenderHP = defender.hitPoint
                    defenderATK = defender.damage
                    defenderSPD = defender.speed
                    defenderDEF = defender.defense
                    defenderRES = defender.resistance
                    //宣告攻擊開始
                    console.log(attackerNAME + " 對 " + defenderNAME + " 發動攻擊")
                    //技能前數值 log 顯示
                    /*
                    console.log("上技能之前的數值")
                    console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                    console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                    console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                    console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                    console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                    console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                    console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                    console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                    console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                    console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                    */

                    //attacker 的技能
                    if(attacker.skill2Name == "破防擊" && attacker.skill2Level > 0){
                        debuffDEF = Math.floor(defenderDEF * (0.1 + attacker.skill2Level * 0.2))
                        debuffRES = Math.floor(defenderRES * (0.1 + attacker.skill2Level * 0.2))
                        defenderDEF -= debuffDEF
                        defenderRES -= debuffRES
                        console.log(attackerNAME + " 透過技能 破防擊（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 防守 - " + debuffDEF + " 魔防 - " + debuffRES)
                    }

                    if(attacker.skill3Name == "尊嚴" && attacker.skill3Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill3Level)){
                            buffATK = 2 * attacker.skill3Level
                            buffDEF = 2 * attacker.skill3Level
                            attackerATK += buffATK
                            attackerDEF += buffDEF
                            console.log(attackerNAME + " 透過技能 尊嚴（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK + " 防守 + " + buffDEF)
                        }
                        else{
                            debuffATK = 7
                            debuffDEF = 7
                            attackerATK -= debuffATK
                            attackerDEF -= debuffDEF
                            console.log(attackerNAME + " 透過技能 尊嚴（" + attacker.skill3Description[attacker.skill3Level] + "）降低 攻擊 - " + debuffATK + " 防守 - " + debuffATK)
                        }
                    }
                    
                    if(attacker.skill1Name == "衝敵斬" && attacker.skill1Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill1Level)){
                            debuffATK = 5
                            defenderATK -= debuffATK
                            console.log(attackerNAME + " 透過技能 衝敵斬（" + attacker.skill1Description[attacker.skill1Level] + "）使 " + defenderNAME + " 攻擊 - " + debuffATK)
                        }
                    }

                    if(attacker.skill1Name == "覺醒" && attacker.skill1Level > 0)
                    {
                        buffSPD = attacker.skill1Level * 2
                        attackerSPD += buffSPD
                        console.log(attackerNAME + " 透過技能 覺醒（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 速度 + " + buffSPD)
                    }

                    if(attacker.skill1Name == "冰河" && attacker.skill1Level > 0)
                    {
                        buffRES = Math.floor(attackerRES * (0.1 + attacker.skill1Level * 0.2))
                        attackerATK += buffRES
                        console.log(attackerNAME + " 透過技能 冰河（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 魔防 + " + buffRES)
                    }

                    if(attacker.skill2Name == "生命的代價" && attacker.skill2Level > 0)
                    {
                        buff = attacker.skill2Level
                        attackerATK += buff
                        attackerSPD += buff
                        attackerDEF += buff
                        attackerRES += buff
                        console.log(attackerNAME + " 透過技能 生命的代價（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                    }

                    if(attacker.skill3Name == "憤怒" && attacker.skill3Level > 0)
                    {
                        if(attackerHP <= attacker.hitPointMaxium * (0.25 * attacker.skill3Level)){
                                buffATK = 10
                                attackerATK += buffATK
                                console.log(attackerNAME + " 透過技能 憤怒（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                            }
                    }

                    if(attacker.skill3Name == "完美" && attacker.skill3Level > 0)
                    {
                        if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill3Level)){
                            buffSPD = 2 * attacker.skill3Level
                            buffRES = 2 * attacker.skill3Level
                            attackerSPD += buffSPD
                            attackerRES += buffRES
                            console.log(attackerNAME + " 透過技能 完美（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 速度 + " + buffSPD + " 魔防 + " + buffRES)
                        }
                        else{
                            debuffSPD = 7
                            debuffRES = 7
                            attackerATK -= debuffSPD
                            attackerRES -= debuffRES
                            console.log(attackerNAME + " 透過技能 完美（" + attacker.skill3Description[attacker.skill3Level] + "）降低 速度 - " + debuffSPD + " 魔防 - " + debuffRES)
                        }
                    }

                    //defender 的技能
                    if(defender.skill1Name == "渾沌學")
                    {
                        buffATK = Math.floor(defenderATK * defender.skill1Level * 0.2)
                        defenderATK += buffATK
                        console.log(defenderNAME + " 透過技能 渾沌學（" + defender.skill1Description[defender.skill1Level] + "）獲得 攻擊 + " + buffATK)
                    }

                    if(defender.skill3Name == "緋炎")
                    {
                        buffDEF = defender.skill3Level * 2
                        defenderDEF += buffDEF
                        console.log(defenderNAME + " 透過技能 緋炎（" + defender.skill3Description[defender.skill3Level] + "）獲得 防守 + " + buffDEF)
                    }

                    if(defender.skill3Name == "憤怒")
                    {
                        if(defenderHP <= defender.hitPointMaxium * (0.25 * defender.skill3Level)){
                                buffATK = 10
                                defenderATK += buffATK
                                console.log(defenderNAME + " 透過技能 憤怒（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                            }
                    }

                    if(defender.skill2Name == "附身")
                    {
                        buff = defender.skill2Level * 3 - 2
                        defenderATK += buff
                        defenderSPD += buff
                        defenderDEF += buff
                        defenderRES += buff
                        console.log(defenderNAME + " 透過技能 附身（" + defender.skill2Description[defender.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                    }

                    if(defender.skill3Name == "暴雷")
                    {
                        buffATK = Math.floor(defenderATK * defender.skill3Level * 0.3)
                        defenderATK += buffATK
                        console.log(defenderNAME + " 透過技能 暴雷（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                    }

                    //戰鬥前數值 log 顯示
                    /*
                    console.log("上技能之後的數值")
                    console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                    console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                    console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                    console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                    console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                    console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                    console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                    console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                    console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                    console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                    */


                    //戰鬥前的技能

                    if(attacker.weaponName == "斬裂劍"){
                        if(defenderDEF > defenderRES){
                            attackingTrueDefRes = defenderRES
                            console.log(attackerNAME + " 透過武器 斬裂劍（" + attacker.weaponDescripton + "）以 " + defenderNAME + " 的 魔防 計算傷害")
                        }
                        else{
                            attackingTrueDefRes = defenderDEF
                            //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                        }
                    }
                    else if(attacker.weaponAttribute == 0){
                        attackingTrueDefRes = defenderDEF
                        //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                    }
                    else if(attacker.weaponAttribute == 1){
                        attackingTrueDefRes = defenderRES
                        //console.log(attackerNAME + " 以 " + defenderNAME + " 的 魔防 計算傷害")
                    }

                    if(defender.skill2Name == "逆轉" && defenderHP >= defender.hitPointMaxium * (0.25 * defender.skill2Level)){
                        if(attackingTrueDefRes = defenderRES && defenderDEF > defenderRES){
                            attackingTrueDefRes = defenderDEF
                            console.log(defenderNAME + " 透過技能 逆轉（" + defender.skill2Description[defender.skill2Level] + "）以自身的 防守 承受傷害")
                        }
                        else{
                            attackingTrueDefRes = defenderRES
                            console.log(defenderNAME + " 透過技能 逆轉（" + defender.skill2Description[defender.skill2Level] + "）以自身的 魔防 承受傷害")
                        }
                    }
                    if(defender.weaponAttribute == 0){
                        defendingTrueDefRes = attackerDEF
                        //console.log(defenderNAME + " 以 " + attackerNAME + " 的 防守 計算傷害")
                    }
                    else if(defender.weaponAttribute == 1){
                        defendingTrueDefRes = attackerRES
                        //console.log(defenderNAME + " 以 " + attackerNAME + " 的 魔防 計算傷害")
                    }

                    attackerFollowUp = 0
                    defenderFollowUp = 0
                    if(attackerSPD > defenderSPD + 5){
                        attackerFollowUp +=1
                        console.log(attackerNAME + " 因為速度高於敵人 5 以上，可以追擊")
                    }
                    if(defenderSPD > attackerSPD + 5){
                        defenderFollowUp +=1
                        console.log(defenderNAME + " 因為速度高於敵人 5 以上，可以追擊")
                    }

                    if(defender.skill2Name == "回擊" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill2Level)){
                        defenderFollowUp += 1
                        console.log(defenderNAME + " 透過技能 回擊（" + defender.skill2Description[defender.skill2Level] + "）獲得 反手追擊")
                    }

                    attackingTrueDamage = attackerATK - attackingTrueDefRes
                    if(attackingTrueDamage < 0) attackingTrueDamage = 0
                    //console.log(attackerNAME + " 對 " + defenderNAME + " 會造成 " + attackingTrueDamage + " 點傷害")
                    defendingTrueDamage = defenderATK - defendingTrueDefRes
                    if(defendingTrueDamage < 0) defendingTrueDamage = 0
                    //console.log(defenderNAME + " 對 " + attackerNAME + " 會造成 " + defendingTrueDamage + " 點傷害")

                    

                    if(defender.skill1Name == "不動如山" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill1Level)){
                        attackerFollowUp = 0
                        defenderFollowUp = 0
                        console.log(defenderNAME + " 透過技能 不動如山（" + defender.skill1Description[defender.skill1Level] + "）使自己與敵人皆無法進行追擊")
                    }

                    if(attacker.skill3Name == "靜謐" ){
                        attackerFollowUp = 0
                        if(attackerSPD >= defenderSPD + (-1 + 2 * attacker.skill3Level)){
                            defendingTrueDamage = 0
                            console.log(attackerNAME + " 透過技能 靜謐（" + attacker.skill3Description[attacker.skill3Level] + "）使 " + defenderNAME + " 無法反擊")
                        }
                    }
                    
                    if(attacker.weaponRange != defender.weaponRange){
                        defendingTrueDamage = 0
                        //console.log(defenderNAME + " 無法反擊")
                    }

                    if(defender.skill2Name == "反擊" && defender.skill2Level >= 2){
                        defendingTrueDamage = defenderATK - defendingTrueDefRes
                        console.log(defenderNAME + " 透過技能 反擊（" + defender.skill3Description[defender.skill3Level] + "）撤銷 自身無法反擊")
                    }

                    if(defender.skill3Name == "隱匿" && attacker.weaponAttribute == 0){
                        debuff = Math.floor(attackingTrueDamage * 0.25 * defender.skill3Level)
                        attackingTrueDamage -= debuff
                        console.log(defenderNAME + " 透過技能 隱匿（" + defender.skill3Description[defender.skill3Level] + "）降低 " + debuff + " 點傷害")
                    }

                    if(defender.skill2Name == "聖盾" && attacker.weaponAttribute == 1){
                        debuff = Math.floor(attackingTrueDamage * 0.25 * defender.skill2Level)
                        attackingTrueDamage -= debuff
                        console.log(defenderNAME + " 透過技能 聖盾（" + defender.skill2Description[defender.skill2Level] + "）降低 " + debuff + " 點傷害")
                    }

                    //戰鬥中的技能
                    console.log("攻擊前：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)

                    //attacker 攻擊
                    defenderHP -= attackingTrueDamage

                    if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                        defenderHP = 1
                        console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                        defenderattacker.skill1Level = 0
                    }

                    if(attacker.skill2Name == "奉獻"){
                        buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                        attackerHP += buff
                        overload = attackerHP - attacker.hitPointMaxium
                        if(overload >= 0){
                            attackerHP = attacker.hitPointMaxium
                            buff -= overload    
                        }
                        console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                    }
                    console.log(attackerNAME + " 對 " + defenderNAME + " 造成 " + attackingTrueDamage + " 點傷害 ") 

                    //defender 反擊
                    if(defenderHP > 0){
                        attackerHP -= defendingTrueDamage

                        if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                            debuff = defenderATK * 0.5
                            attackerHP -= debuff
                            console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                        }
                        console.log(defenderNAME + " 對 " + attackerNAME + " 造成 " + defendingTrueDamage + " 點傷害 ")
                    }
                    

                    //attacker 追擊
                    if(attackerFollowUp == 1 && attackerHP > 0){
                        defenderHP -= attackingTrueDamage

                        defenderHP -= attackingTrueDamage
                        if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                            defenderHP = 1
                            console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                            defenderattacker.skill1Level = 0
                        }

                        if(attacker.skill2Name == "奉獻"){
                            buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                            attackerHP += buff
                            overload = attackerHP - attacker.hitPointMaxium
                            if(overload >= 0){
                                attackerHP = attacker.hitPointMaxium
                                buff -= overload    
                            }
                            console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                        }
                        console.log(attackerNAME + " 對 " + defenderNAME + " 追擊 " + attackingTrueDamage + " 點傷害 ") 
                    }
                    

                    //defender 反擊
                    if(defenderFollowUp == 1 && defenderHP > 0){
                        attackerHP -= defendingTrueDamage

                        if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                            debuff = defenderATK * 0.5
                            attackerHP -= debuff
                            console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                        }

                        console.log(defenderNAME + " 對 " + attackerNAME + " 追擊 " + defendingTrueDamage + " 點傷害 ")
                    }

                    characterStorage[characterX][characterY].hitPoint = attackerHP
                    characterStorage[x][y].hitPoint = defenderHP

                    //戰鬥後的技能
                    if(defender.skill3Name == "復甦" && defenderHP > 0){
                        buff = -2 + 4 * defender.skill3Level
                        defenderHP += buff
                        if(defenderHP > defender.hitPointMaxium[difficulty]){
                            overload = defenderHP - defender.hitPointMaxium[difficulty]
                            defenderHP = defender.hitPointMaxium[difficulty]
                            buff -= overload
                        }
                        console.log(defenderNAME + " 透過技能 復甦（" + defender.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                    }

                    if(attacker.skill3Name == "復甦" && attackerHP > 0 && attacker.skill3Level > 0){
                        buff = -2 + 4 * attacker.skill3Level
                        attackerHP += buff
                        if(attackerHP > attacker.hitPointMaxium[difficulty]){
                            overload = attackerHP - attacker.hitPointMaxium[difficulty]
                            attackerHP = attacker.hitPointMaxium[difficulty]
                            buff -= overload
                        }
                        console.log(attackerNAME + " 透過技能 復甦（" + attacker.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                    }


                    if(attacker.skill2Name == "蛇毒" && attackerHP > 0 && attacker.skill2Level > 0){
                        debuff = 1 + 3 * attacker.skill2Level
                        if(defenderHP < debuff){
                            defenderHP = 1
                            debuff = defenderHP - 1
                        }
                        else defenderHP -= debuff
                        console.log(attackerNAME + " 透過技能 蛇毒（" + attacker.skill2Description[attacker.skill2Level] + "）在戰鬥後對 " + defenderNAME + " 造成 " + debuff + " 點傷害")
                    }

                    if(attacker.skill3Name == "生命的代價" && attackerHP > 0 && attacker.skill2Level > 0)
                    {
                        debuff = 2 * attacker.skill2Level
                        if(attackerHP < debuff){
                            attackerHP = 1
                            debuff = attackerHP - 1
                        }
                        else attackerHP -= debuff
                        console.log(attackerNAME + " 在戰鬥後，因為技能 生命的代價（" + attacker.skill3Description[attacker.skill3Level] + "）而喪失 HP " + debuff)
                    }

                    characterStorage[characterX][characterY].hitPoint = attackerHP
                    characterStorage[x][y].hitPoint = defenderHP
                    console.log("攻擊後：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)

                    
                    //這裡結束
                    updateInfoPanel(characterX,characterY,x,y)
                    checkAlive(characterX,characterY,x,y)
                    for(let i=0;i<10;i++)
                    {
                        for(let j=0;j<20;j++)
                        {             
                            if((Math.abs(characterX-j)+Math.abs(characterY-i))<=characterStorage[characterX][characterY].weaponRange)
                            {
                                document.getElementById("cell"+j+i).setAttribute("style","background-color: none")
                            }
                        }
                    }   
                    characterStorage[characterX][characterY].attackActionPoint--
                    selectedFlag=1
                    playerAction--
                    document.getElementById("turn").innerHTML="你的回合 剩餘可行動單位 : "+playerAction
                    if(playerAction<=0) setTimeout(function(){enemyTurn()},1000)
                }
            }

            function stateGenerateAlly(character, difficulty)
            {
                character.damage += character.weaponMight[difficulty]
            }

            function stateGenerateEnemy(character, level)
            {	//敵方腳色初始數據生成和我方腳色升級數據生成
				let hitPointGrowth = character.hitPointGrowth
				let damageGrowth = character.damageGrowth
				let speedGrowth = character.speedGrowth
				let defenseGrowth = character.defenseGrowth
				let resistanceGrowth = character.resistanceGrowth
				
				for(var i = 0; i < level; i++)
                {
					let hitPointRNG = Math.random()
					let damageRNG = Math.random()
					let speedRNG = Math.random()
					let defenseRNG = Math.random()
					let resistanceRNG = Math.random()
					if(hitPointRNG >= hitPointGrowth) character.hitPointMaxium++
					if(damageRNG >= damageGrowth) character.damage++
					if(speedRNG >= speedGrowth) character.speed++
					if(defenseRNG >= defenseGrowth) character.defense++
					if(resistanceRNG >= resistanceGrowth) character.resistance++
				}
                character.hitPoint = character.hitPointMaxium
                character.damage += character.weaponMight[difficulty]
                character.skill1Level = difficulty
                character.skill2Level = difficulty
                character.skill3Level = difficulty
                /*
				console.log(character.unitName + " " + "Lv " + character.unitLevel[difficulty])
                console.log(character.unitName + " " + "HP " + character.hitPoint)
				console.log(character.unitName + " " + "ATK " + character.damage)
				console.log(character.unitName + " " + "SPD " + character.speed)
				console.log(character.unitName + " " + "DEF " + character.defense)
				console.log(character.unitName + " " + "RES " + character.resistance)
                console.log(character.unitName + " " + character.skill1Name + " Lv. " + character.skill1Level)
                console.log(character.unitName + " " + character.skill1Description[character.skill1Level])
                console.log(character.unitName + " " + character.skill2Name + " Lv. " + character.skill2Level)
                console.log(character.unitName + " " + character.skill2Description[character.skill2Level])
                console.log(character.unitName + " " + character.skill3Name + " Lv. " + character.skill3Level)
                console.log(character.unitName + " " + character.skill3Description[character.skill3Level])
                */
			}

            function stateGenerateBoss(character, difficulty)
            {
                
                character.hitPoint = character.hitPointMaxium[difficulty]
                character.damage = character.damageGrowth[difficulty]
                character.damage += character.weaponMight[difficulty]
                character.speed = character.speedGrowth[difficulty]
                character.defense = character.defenseGrowth[difficulty]
                character.resistance = character.resistanceGrowth[difficulty]
                character.skill1Level = difficulty
                character.skill2Level = difficulty
                character.skill3Level = difficulty
                /*
                console.log(character.unitName + " " + "Lv " + character.unitLevel[difficulty])
                console.log(character.unitName + " " + "HP " + character.hitPoint)
				console.log(character.unitName + " " + "ATK " + character.damage)
				console.log(character.unitName + " " + "SPD " + character.speed)
				console.log(character.unitName + " " + "DEF " + character.defense)
				console.log(character.unitName + " " + "RES " + character.resistance)
                console.log(character.unitName + " " + character.skill1Name + " Lv. " + character.skill1Level)
                console.log(character.unitName + " " + character.skill1Description[character.skill1Level])
                console.log(character.unitName + " " + character.skill2Name + " Lv. " + character.skill2Level)
                console.log(character.unitName + " " + character.skill2Description[character.skill2Level])
                console.log(character.unitName + " " + character.skill3Name + " Lv. " + character.skill3Level)
                console.log(character.unitName + " " + character.skill3Description[character.skill3Level])
                */
            }

            function checkAlive(characterX,characterY,x,y)
            {
                if(characterStorage[characterX][characterY].hitPoint<=0&&characterStorage[x][y].side=="alpha")
                {
                    levelUp(x, y)
                    enemyAliveUnit--
                    characterStorage[characterX][characterY]=undefined
                    document.getElementById("cell"+x+y).innerHTML=""
                    console.log("enemyAliveUnit:"+enemyAliveUnit)
                    
                    
                }
                if(characterStorage[characterX][characterY].hitPoint<=0&&characterStorage[x][y].side=="beta")
                {
                    allyAliveUnit--
                    characterStorage[characterX][characterY]=undefined
                    document.getElementById("cell"+x+y).innerHTML=""
                    console.log("allyAliveUnit:"+allyAliveUnit)
                } 
                if(characterStorage[x][y].hitPoint<=0&&characterStorage[x][y].side=="alpha")
                {
                    allyAliveUnit--
                    characterStorage[x][y]=undefined
                    document.getElementById("cell"+x+y).innerHTML=""
                    console.log("allyAliveUnit:"+allyAliveUnit)
                } 
                if(characterStorage[x][y].hitPoint<=0&&characterStorage[x][y].side=="beta")
                {
                    levelUp(characterX, characterY)
                    enemyAliveUnit--
                    characterStorage[x][y]=undefined
                    document.getElementById("cell"+x+y).innerHTML=""
                    console.log("enemyAliveUnit:"+enemyAliveUnit)
                    
                } 
                if(summoner.hitPoint <= 0)
                {
                    console.log("defeat")
                    end(0)
                } 
                if(boss.hitPoint <= 0)
                {
                    console.log("victory")
                    end(1)
                } 
            }

            function levelUp(x, y){
                console.log(characterStorage[x][y].unitName + " 升級")
                
                console.log("升級之前的數值")
                console.log(characterStorage[x][y].unitName + " " + "Lv " + characterStorage[x][y].unitLevel)
                console.log(characterStorage[x][y].unitName + " " + "HP " + characterStorage[x][y].hitPoint)
				console.log(characterStorage[x][y].unitName + " " + "ATK " + characterStorage[x][y].damage)
				console.log(characterStorage[x][y].unitName + " " + "SPD " + characterStorage[x][y].speed)
				console.log(characterStorage[x][y].unitName + " " + "DEF " + characterStorage[x][y].defense)
				console.log(characterStorage[x][y].unitName + " " + "RES " + characterStorage[x][y].resistance)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill1Name + " Lv. " + characterStorage[x][y].skill1Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill1Description[characterStorage[x][y].skill1Level])
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill2Name + " Lv. " + characterStorage[x][y].skill2Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill2Description[characterStorage[x][y].skill2Level])
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill3Name + " Lv. " + characterStorage[x][y].skill3Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill3Description[characterStorage[x][y].skill3Level])


                let hitPointGrowth = characterStorage[x][y].hitPointGrowth
				let damageGrowth = characterStorage[x][y].damageGrowth
				let speedGrowth = characterStorage[x][y].speedGrowth
				let defenseGrowth = characterStorage[x][y].defenseGrowth
				let resistanceGrowth = characterStorage[x][y].resistanceGrowth
				
				let hitPointRNG = Math.random()
                let damageRNG = Math.random()
                let speedRNG = Math.random()
                let defenseRNG = Math.random()
                let resistanceRNG = Math.random()

                if(hitPointRNG >= hitPointGrowth){
                    characterStorage[x][y].hitPointMaxium++
                    console.log(characterStorage[x][y].unitName + " HP 上升 1 點")
                }
                if(damageRNG >= damageGrowth){
                    characterStorage[x][y].damage++
                    console.log(characterStorage[x][y].unitName + " ATK 上升 1 點")
                }
                if(speedRNG >= speedGrowth){
                    characterStorage[x][y].speed++
                    console.log(characterStorage[x][y].unitName + " SPD 上升 1 點")
                }
                if(defenseRNG >= defenseGrowth){
                    characterStorage[x][y].defense++
                    console.log(characterStorage[x][y].unitName + " DEF 上升 1 點")
                }
                if(resistanceRNG >= resistanceGrowth){
                    characterStorage[x][y].resistance++
                    console.log(characterStorage[x][y].unitName + " RES 上升 1 點")
                }

                let RNG = skillUpRNG(x, y)
                while(RNG == -1){
                    RNG = skillUpRNG(x, y)
                }
                if(RNG == 0){
                    console.log(characterStorage[x][y].unitName + " 已達等級上限，無法升級")
                }
                if(RNG == 1){
                    characterStorage[x][y].skill1Level++
                    console.log("技能 " + characterStorage[x][y].skill1Name + " 升級")
                }
                if(RNG == 2){
                    characterStorage[x][y].skill2Level++
                    console.log("技能 " + characterStorage[x][y].skill2Name + " 升級")
                }
                if(RNG == 3){
                    characterStorage[x][y].skill3Level++
                    console.log("技能 " + characterStorage[x][y].skill3Name + " 升級")
                }

                console.log("升級之後的數值")
                console.log(characterStorage[x][y].unitName + " " + "Lv " + characterStorage[x][y].unitLevel)
                console.log(characterStorage[x][y].unitName + " " + "HP " + characterStorage[x][y].hitPoint)
				console.log(characterStorage[x][y].unitName + " " + "ATK " + characterStorage[x][y].damage)
				console.log(characterStorage[x][y].unitName + " " + "SPD " + characterStorage[x][y].speed)
				console.log(characterStorage[x][y].unitName + " " + "DEF " + characterStorage[x][y].defense)
				console.log(characterStorage[x][y].unitName + " " + "RES " + characterStorage[x][y].resistance)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill1Name + " Lv. " + characterStorage[x][y].skill1Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill1Description[characterStorage[x][y].skill1Level])
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill2Name + " Lv. " + characterStorage[x][y].skill2Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill2Description[characterStorage[x][y].skill2Level])
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill3Name + " Lv. " + characterStorage[x][y].skill3Level)
                console.log(characterStorage[x][y].unitName + " " + characterStorage[x][y].skill3Description[characterStorage[x][y].skill3Level])
            }

            function skillUpRNG(x, y){
                let RNG = Math.floor((Math.random() * 3) + 1)
                if(characterStorage[x][y].skill1Level + characterStorage[x][y].skill2Level + characterStorage[x][y].skill3Level == 9){
                    return 0
                }
                if(RNG == 1 && characterStorage[x][y].skill1Level >= 3){
                    return -1
                }
                if(RNG == 2 && characterStorage[x][y].skill2Level >= 3){
                    return -1
                }
                if(RNG == 3 && characterStorage[x][y].skill3Level >= 3){
                    return -1
                }
                return RNG
            }

            function enemyTurn()
            {
                let attackFlag=0,waitTime=0
                console.log("敵方回合")
                document.getElementById("turn").innerHTML="敵方回合 剩餘敵方單位 : "+enemyAliveUnit


                //montastic1
                notBeta = 0
                debuff = 0
                for(let i=0;i<10;i++){
                    for(let j=0;j<20;j++){
                        if(characterStorage[j][i]!=undefined && Math.abs(13 - j) + Math.abs(7 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                            notBeta++
                            
                        }
                    }
                }
                debuff = Math.floor(notBeta * 0.5 * monastic1.skill1Level)

                if(monastic1.hitPoint > 0){
                    for(let i=0;i<10;i++){
                        for(let j=0;j<20;j++){
                            if(characterStorage[j][i]!=undefined && Math.abs(13 - j) + Math.abs(7 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                                characterStorage[j][i].hitPoint -= debuff
                                amount = debuff
                                if(characterStorage[j][i].hitPoint < 0){
                                    amount = 0
                                    overload = 0 - characterStorage[j][i].hitPoint
                                    characterStorage[j][i].hitPoint = 1
                                    amount -= overload
                                }
                                if(amount > 0) console.log(characterStorage[j][i].unitName + " 透過默靈僧侶的技能 獻祭（" + monastic1.skill1Description[monastic1.skill1Level] + "）失去 " + amount + " HP")
                            }
                        }
                    }
                        
                }

                notBeta = 0
                buff = 0
                for(let i=0;i<10;i++){
                    for(let j=0;j<20;j++){
                        if(characterStorage[j][i]!=undefined && Math.abs(13 - j) + Math.abs(7 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                            notBeta++
                            
                        }
                    }
                }
                buff = Math.floor(notBeta * 0.5 * monastic1.skill1Level)

                if(monastic1.hitPoint > 0){
                    for(let i=0;i<10;i++){
                        for(let j=0;j<20;j++){
                            if(characterStorage[j][i]!=undefined && Math.abs(13 - j) + Math.abs(7 - i) <= 5 && characterStorage[j][i].side=="beta"){
                                characterStorage[j][i].hitPoint += buff
                                amount = buff
                                if(characterStorage[j][i].hitPoint > characterStorage[j][i].hitPointMaxium){
                                    overload = characterStorage[j][i].hitPoint - characterStorage[j][i].hitPointMaxium
                                    characterStorage[j][i].hitPoint = characterStorage[j][i].hitPointMaxium
                                    amount -= overload
                                }
                                if(amount > 0) console.log(characterStorage[j][i].unitName + " 透過默靈僧侶的技能 治癒杖（" + monastic1.skill1Description[monastic1.skill1Level] + "）恢復 " + amount + " HP")
                            }
                        }
                    }
                        
                }

                //montastic2
                notBeta = 0
                debuff = 0
                for(let i=0;i<10;i++){
                    for(let j=0;j<20;j++){
                        if(characterStorage[j][i]!=undefined && Math.abs(5 - j) + Math.abs(6 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                            notBeta++
                            
                        }
                    }
                }
                debuff = Math.floor(notBeta * 0.5 * monastic2.skill1Level)

                if(monastic2.hitPoint > 0){
                    for(let i=0;i<10;i++){
                        for(let j=0;j<20;j++){
                            if(characterStorage[j][i]!=undefined && Math.abs(5 - j) + Math.abs(6 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                                characterStorage[j][i].hitPoint -= debuff
                                amount = debuff
                                if(characterStorage[j][i].hitPoint < 0){
                                    amount = 0
                                    overload = 0 - characterStorage[j][i].hitPoint
                                    characterStorage[j][i].hitPoint = 1
                                    amount -= overload
                                }
                                if(amount > 0) console.log(characterStorage[j][i].unitName + " 透過默靈僧侶的技能 獻祭（" + monastic2.skill1Description[monastic2.skill1Level] + "）失去 " + amount + " HP")
                            }
                        }
                    }
                        
                }

                notBeta = 0
                buff = 0
                for(let i=0;i<10;i++){
                    for(let j=0;j<20;j++){
                        if(characterStorage[j][i]!=undefined && Math.abs(5 - j) + Math.abs(6 - i) <= 5 && characterStorage[j][i].side=="alpha"){
                            notBeta++
                            
                        }
                    }
                }
                buff = Math.floor(notBeta * 0.5 * monastic2.skill1Level)

                if(monastic2.hitPoint > 0){
                    for(let i=0;i<10;i++){
                        for(let j=0;j<20;j++){
                            if(characterStorage[j][i]!=undefined && Math.abs(5 - j) + Math.abs(6 - i) <= 5 && characterStorage[j][i].side=="beta"){
                                characterStorage[j][i].hitPoint += buff
                                amount = buff
                                if(characterStorage[j][i].hitPoint > characterStorage[j][i].hitPointMaxium){
                                    overload = characterStorage[j][i].hitPoint - characterStorage[j][i].hitPointMaxium
                                    characterStorage[j][i].hitPoint = characterStorage[j][i].hitPointMaxium
                                    amount -= overload
                                }
                                if(amount > 0) console.log(characterStorage[j][i].unitName + " 透過默靈僧侶的技能 治癒杖（" + monastic2.skill1Description[monastic2.skill1Level] + "）恢復 " + amount + " HP")
                            }
                        }
                    }
                        
                }
                


                for(let i=0;i<10;i++)
                {
                    for(let j=0;j<20;j++)
                    {
                        
                        if(characterStorage[j][i]!=undefined&&characterStorage[j][i].side=="beta")
                        {
                            for(let k=0;k<10;k++)
                            {
                                for(let l=0;l<20;l++)
                                {   
                                    if((Math.abs(l-j)+Math.abs(k-i))==characterStorage[j][i].weaponRange&&characterStorage[l][k]!=undefined&&characterStorage[l][k].side=="alpha")
                                    {                                        
                                        setTimeout(function()
                                        {
                                            //初始化 attacker 角色數據
                                            attacker = characterStorage[j][i]
                                            attackerNAME = attacker.unitName
                                            attackerHP = attacker.hitPoint
                                            attackerATK = attacker.damage
                                            attackerSPD = attacker.speed
                                            attackerDEF = attacker.defense
                                            attackerRES = attacker.resistance
                                            //初始化 defender 角色數據
                                            defender = characterStorage[l][k]
                                            defenderNAME = defender.unitName
                                            defenderHP = defender.hitPoint
                                            defenderATK = defender.damage
                                            defenderSPD = defender.speed
                                            defenderDEF = defender.defense
                                            defenderRES = defender.resistance
                                            //宣告攻擊開始
                                            console.log(attackerNAME + " 對 " + defenderNAME + " 發動攻擊")
                                            //技能前數值 log 顯示
                                            /*
                                            console.log("上技能之前的數值")
                                            console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                                            console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                                            console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                                            console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                                            console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                                            console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                                            console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                                            console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                                            console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                                            console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                                            */

                                            //attacker 的技能
                                            if(attacker.skill1Name == "渾沌學")
                                            {
                                                buffATK = Math.floor(attackerATK * attacker.skill1Level * 0.2)
                                                attackerATK += buffATK
                                                console.log(attackerNAME + " 透過技能 渾沌學（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 攻擊 + " + buffATK)
                                            }

                                            if(attacker.skill2Name == "覺醒" && attacker.skill2Level > 0)
                                            {
                                                buffSPD = attacker.skill1Level * 2
                                                attackerSPD += buffSPD
                                                console.log(attackerNAME + " 透過技能 覺醒（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 速度 + " + buffSPD)
                                            }

                                            if(attacker.skill1Name == "衝敵斬" && attacker.skill1Level > 0)
                                            {
                                                if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill1Level)){
                                                    debuffATK = 5
                                                    defenderATK -= debuffATK
                                                    console.log(attackerNAME + " 透過技能 衝敵斬（" + attacker.skill1Description[attacker.skill1Level] + "）使 " + defenderNAME + " 攻擊 - " + debuffATK)
                                                }
                                            }

                                            if(attacker.skill1Name == "華炎" && attacker.skill1Level > 0)
                                            {
                                                buffDEF = Math.floor(attackerDEF * (0.1 + attacker.skill1Level * 0.2))
                                                attackerDEF += buffDEF
                                                console.log(attackerNAME + " 透過技能 華炎（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 防守 + " + buffDEF)
                                            }
                                            
                                            if(attacker.skill3Name == "憤怒" && attacker.skill3Level > 0)
                                            {
                                                if(attackerHP <= attacker.hitPointMaxium * (0.25 * attacker.skill3Level)){
                                                        buffATK = 10
                                                        attackerATK += buffATK
                                                        console.log(attackerNAME + " 透過技能 憤怒（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                                    }
                                            }

                                            if(attacker.skill1Name == "強化" && attacker.skill1Level > 0)
                                            {
                                                buff = attacker.skill1Level
                                                attackerATK += buff
                                                attackerSPD += buff
                                                console.log(attackerNAME + " 透過技能 強化（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff)
                                            }

                                            if(attacker.skill2Name == "附身")
                                            {
                                                buff = attacker.skill2Level * 3 - 2
                                                attackerATK += buff
                                                attackerSPD += buff
                                                attackerDEF += buff
                                                attackerRES += buff
                                                console.log(attackerNAME + " 透過技能 附身（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                                            }
                                            
                                            if(attacker.skill2Name == "破防擊" && attacker.skill2Level > 0){
                                                debuffDEF = Math.floor(defenderDEF * (0.1 + attacker.skill2Level * 0.2))
                                                debuffRES = Math.floor(defenderRES * (0.1 + attacker.skill2Level * 0.2))
                                                defenderDEF -= debuffDEF
                                                defenderRES -= debuffRES
                                                console.log(attackerNAME + " 透過技能 破防擊（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 防守 - " + debuffDEF + " 魔防 - " + debuffRES)
                                            }

                                            if(attacker.skill3Name == "暴雷")
                                            {
                                                buffATK = Math.floor(attackerATK * attacker.skill3Level * 0.3)
                                                attackerATK += buffATK
                                                console.log(attackerNAME + " 透過技能 暴雷（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                            }

                                            //defender 的技能

                                            if(defender.skill3Name == "尊嚴" && defender.skill3Level > 0)
                                            {
                                                if(defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill3Level)){
                                                    buffATK = 2 * defender.skill3Level
                                                    buffDEF = 2 * defender.skill3Level
                                                    defenderATK += buffATK
                                                    defenderDEF += buffDEF
                                                    console.log(defenderNAME + " 透過技能 尊嚴（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK + " 防守 + " + buffDEF)
                                                }
                                                else{
                                                    debuffATK = 7
                                                    debuffDEF = 7
                                                    defenderATK -= debuffATK
                                                    defenderDEF -= debuffDEF
                                                    console.log(defenderNAME + " 透過技能 尊嚴（" + defender.skill3Description[defender.skill3Level] + "）降低 攻擊 - " + debuffATK + " 防守 - " + debuffATK)
                                                }
                                            }

                                            if(defender.skill3Name == "麗華")
                                            {
                                                buffRES = defender.skill3Level * 2
                                                defenderRES += buffRES
                                                console.log(defenderNAME + " 透過技能 緋炎（" + defender.skill3Description[defender.skill3Level] + "）獲得 防守 + " + buffRES)
                                            }

                                            if(defender.skill2Name == "生命的代價" && defender.skill2Level > 0)
                                            {
                                                buff = defender.skill2Level
                                                defenderATK += buff
                                                defenderSPD += buff
                                                defenderDEF += buff
                                                defenderRES += buff
                                                console.log(defenderNAME + " 透過技能 生命的代價（" + defender.skill2Description[defender.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                                            }

                                            if(defender.skill3Name == "憤怒")
                                            {
                                                if(defenderHP <= defender.hitPointMaxium * (0.25 * defender.skill3Level)){
                                                        buffATK = 10
                                                        defenderATK += buffATK
                                                        console.log(defenderNAME + " 透過技能 憤怒（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                                    }
                                            }

                                            if(defender.skill3Name == "完美" && defender.skill3Level > 0)
                                            {
                                                if(defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill3Level)){
                                                    buffSPD = 2 * defender.skill3Level
                                                    buffRES = 2 * defender.skill3Level
                                                    defenderSPD += buffSPD
                                                    defenderRES += buffRES
                                                    console.log(defenderNAME + " 透過技能 完美（" + defender.skill3Description[defender.skill3Level] + "）獲得 速度 + " + buffSPD + " 魔防 + " + buffRES)
                                                }
                                                else{
                                                    debuffSPD = 7
                                                    debuffRES = 7
                                                    defenderATK -= debuffSPD
                                                    defenderRES -= debuffRES
                                                    console.log(defenderNAME + " 透過技能 完美（" + defender.skill3Description[defender.skill3Level] + "）降低 速度 - " + debuffSPD + " 魔防 - " + debuffRES)
                                                }
                                            }

                                            //戰鬥前數值 log 顯示
                                            /*
                                            console.log("上技能之後的數值")
                                            console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                                            console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                                            console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                                            console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                                            console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                                            console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                                            console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                                            console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                                            console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                                            console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                                            */
                                            
                                            //戰鬥前的技能

                                            
                                            if(attacker.weaponAttribute == 0){
                                                attackingTrueDefRes = defenderDEF
                                                //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                                            }
                                            if(attacker.weaponAttribute == 1){
                                                attackingTrueDefRes = defenderRES
                                                //console.log(attackerNAME + " 以 " + defenderNAME + " 的 魔防 計算傷害")
                                            }
                                            if(defender.weaponAttribute == 0){
                                                defendingTrueDefRes = attackerDEF
                                                //console.log(defenderNAME + " 以 " + attackerNAME + " 的 防守 計算傷害")
                                            }
                                            if(defender.weaponAttribute == 1){
                                                defendingTrueDefRes = attackerRES
                                                //console.log(defenderNAME + " 以 " + attackerNAME + " 的 魔防 計算傷害")
                                            }
                                            

                                            attackerFollowUp = 0
                                            defenderFollowUp = 0
                                            if(attackerSPD > defenderSPD + 5){
                                                attackerFollowUp +=1
                                                console.log(attackerNAME + " 因為速度高於敵人 5 以上，可以追擊")
                                            }
                                            if(defenderSPD > attackerSPD + 5){
                                                defenderFollowUp +=1
                                                console.log(defenderNAME + " 因為速度高於敵人 5 以上，可以追擊")
                                            }

                                            if(defender.skill2Name == "回擊" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill2Level)){
                                                defenderFollowUp += 1
                                                console.log(defenderNAME + " 透過技能 回擊（" + defender.skill2Description[defender.skill2Level] + "）獲得 反手追擊")
                                            }

                                            attackingTrueDamage = attackerATK - attackingTrueDefRes
                                            if(attackingTrueDamage < 0) attackingTrueDamage = 0
                                            //console.log(attackerNAME + " 對 " + defenderNAME + " 會造成 " + attackingTrueDamage + " 點傷害")
                                            defendingTrueDamage = defenderATK - defendingTrueDefRes
                                            if(defendingTrueDamage < 0) defendingTrueDamage = 0
                                            //console.log(defenderNAME + " 對 " + attackerNAME + " 會造成 " + defendingTrueDamage + " 點傷害")

                                            if(defender.skill1Name == "不動如山" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill1Level)){
                                                attackerFollowUp = 0
                                                defenderFollowUp = 0
                                                console.log(defenderNAME + " 透過技能 不動如山（" + defender.skill1Description[defender.skill1Level] + "）使自己與敵人皆無法進行追擊")
                                            }

                                            if(attacker.skill2Name == "靜謐" ){
                                                attackerFollowUp = 0
                                                if(attackerSPD >= defenderSPD + (-1 + 2 * attacker.skill2Level)){
                                                    defendingTrueDamage = 0
                                                    console.log(attackerNAME + " 透過技能 靜謐（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 無法反擊")
                                                }
                                            }

                                            if(attacker.weaponName == "始祖斬裂劍"){
                                                attackingTrueDamage = attackingTrueDamage * 2
                                                console.log(attackerNAME + " 透過武器 始祖斬裂劍（" + attacker.weaponDescripton + "）獲得 攻擊兩次")
                                            }
                                            
                                            if(attacker.weaponRange != defender.weaponRange){
                                                defendingTrueDamage = 0
                                                //console.log(defenderNAME + " 無法反擊")
                                            }

                                            if(defender.skill2Name == "反擊" && defender.skill2Level >= 2){
                                                defendingTrueDamage = defenderATK - defendingTrueDefRes
                                                console.log(defenderNAME + " 透過技能 反擊（" + defender.skill3Description[defender.skill3Level] + "）撤銷 自身無法反擊")
                                            }

                                            //戰鬥中的技能
                                            console.log("攻擊前：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)

                                            //attacker 攻擊
                                            defenderHP -= attackingTrueDamage

                                            if(attackerHP <= attacker.hitPointMaxium * attacker.skill3Level * 0.25 && attacker.skill3Name == "同歸於盡"){
                                                    debuff = Math.floor(defenderATK * 0.5)
                                                    attackerHP -= debuff
                                                    console.log(attackerNAME + " 透過技能 同歸於盡（" + attacker.skill3Description[attacker.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                                            }
                                            console.log(attackerNAME + " 對 " + defenderNAME + " 造成 " + attackingTrueDamage + " 點傷害 ") 

                                            //defender 反擊
                                            if(defenderHP > 0){
                                                attackerHP -= defendingTrueDamage

                                                if(defenderHP < 0 && defender.skill1Name == "至聖召喚師" && defender.skill1Level > 1){
                                                    defenderHP = 1
                                                    console.log(defenderNAME + " 透過技能 至聖召喚師（" + defender.skill1Description[defender.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                                                    defenderdefender.skill1Level = 0
                                                }

                                                if(defender.skill2Name == "奉獻"){
                                                    buff = Math.floor(attackingTrueDamage * (0.25 * defender.skill2Level))
                                                    defenderHP += buff
                                                    overload = defenderHP - defender.hitPointMaxium
                                                    if(overload >= 0){
                                                        defenderHP = defender.hitPointMaxium
                                                        buff -= overload    
                                                    }
                                                    console.log(defenderNAME + " 透過技能 奉獻（" + defender.skill2Description[defender.skill2Level] + "）回復了 " + buff + " 點傷害")
                                                }
                                                
                                                console.log(defenderNAME + " 對 " + attackerNAME + " 造成 " + defendingTrueDamage + " 點傷害 ")
                                            }
                                            

                                            //attacker 追擊
                                            if(attackerFollowUp == 1 && attackerHP > 0){
                                                defenderHP -= attackingTrueDamage

                                                defenderHP -= attackingTrueDamage
                                                if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                                                    defenderHP = 1
                                                    console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                                                    defenderattacker.skill1Level = 0
                                                }

                                                if(attacker.skill2Name == "奉獻"){
                                                    buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                                                    attackerHP += buff
                                                    overload = attackerHP - attacker.hitPointMaxium
                                                    if(overload >= 0){
                                                        attackerHP = attacker.hitPointMaxium
                                                        buff -= overload    
                                                    }
                                                    console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                                                }
                                                console.log(attackerNAME + " 對 " + defenderNAME + " 追擊 " + attackingTrueDamage + " 點傷害 ") 
                                            }
                                            

                                            //defender 反擊
                                            if(defenderFollowUp == 1 && defenderHP > 0){
                                                attackerHP -= defendingTrueDamage

                                                if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                                                    debuff = Math.floor(defenderATK * 0.5)
                                                    attackerHP -= debuff
                                                    console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                                                }

                                                console.log(defenderNAME + " 對 " + attackerNAME + " 追擊 " + defendingTrueDamage + " 點傷害 ")
                                            }

                                            characterStorage[j][i].hitPoint = attackerHP
                                            characterStorage[l][k].hitPoint = defenderHP

                                            //戰鬥後的技能
                                            if(defender.skill3Name == "復甦" && defenderHP > 0 && defender.skill3Level > 0){
                                                buff = -2 + 4 * defender.skill3Level
                                                defenderHP += buff
                                                if(defenderHP > defender.hitPointMaxium[difficulty]){
                                                    overload = defenderHP - defender.hitPointMaxium[difficulty]
                                                    defenderHP = defender.hitPointMaxium[difficulty]
                                                    buff -= overload
                                                }
                                                console.log(defenderNAME + " 透過技能 復甦（" + defender.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                                            }

                                            if(attacker.skill3Name == "復甦" && attackerHP > 0 && attacker.skill3Level > 0){
                                                buff = -2 + 4 * attacker.skill3Level
                                                attackerHP += buff
                                                if(attackerHP > attacker.hitPointMaxium[difficulty]){
                                                    overload = attackerHP - attacker.hitPointMaxium[difficulty]
                                                    attackerHP = attacker.hitPointMaxium[difficulty]
                                                    buff -= overload
                                                }
                                                console.log(attackerNAME + " 透過技能 復甦（" + attacker.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                                            }


                                            if(attacker.skill3Name == "蛇毒" && attackerHP > 0 && attacker.skill3Level > 0){
                                                debuff = 1 + 3 * attacker.skill3Level
                                                if(defenderHP < debuff){
                                                    defenderHP = 1
                                                    debuff = defenderHP - 1
                                                }
                                                else defenderHP -= debuff
                                                console.log(attackerNAME + " 透過技能 蛇毒（" + attacker.skill3Description[attacker.skill3Level] + "）在戰鬥後對 " + defenderNAME + " 造成 " + debuff + " 點傷害")
                                            }

                                            if(defender.skill3Name == "生命的代價" && defenderHP > 0 && defender.skill2Level > 0)
                                            {
                                                debuff = 2 * defender.skill2Level
                                                if(defenderHP < debuff){
                                                    defenderHP = 1
                                                    debuff = defenderHP - 1
                                                }
                                                else defenderHP -= debuff
                                                console.log(defenderNAME + " 在戰鬥後，因為技能 生命的代價（" + defender.skill3Description[defender.skill3Level] + "）而喪失 HP " + debuff)
                                            }

                                            characterStorage[j][i].hitPoint = attackerHP
                                            characterStorage[l][k].hitPoint = defenderHP
                                            console.log("攻擊後：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)
                                            updateInfoPanel(j,i,l,k)
                                            checkAlive(j,i,l,k)
                                        },waitTime*2000)
                                        attackFlag=1
                                        waitTime++
                                        break
                                    }
                                    else if((Math.abs(l-j)+Math.abs(k-i))<=characterStorage[j][i].mobility&&characterStorage[l][k]==undefined)
                                    {
                                        for(let m=0;m<10;m++)
                                        {
                                            for(let n=0;n<20;n++)
                                            {   
                                                if((Math.abs(n-l)+Math.abs(m-k))<=characterStorage[j][i].weaponRange&&characterStorage[n][m]!=undefined&&characterStorage[n][m].side=="alpha")
                                                {
                                                    
                                                    setTimeout(function()
                                                    {               
                                                        document.getElementById("cell"+l+k).innerHTML=characterStorage[j][i].unitIcon
                                                        document.getElementById("cell"+j+i).innerHTML=""
                                                        characterStorage[l][k]=characterStorage[j][i]
                                                        characterStorage[j][i]=undefined

                                                        //初始化 attacker 角色數據
                                                        attacker = characterStorage[l][k]
                                                        attackerNAME = attacker.unitName
                                                        attackerHP = attacker.hitPoint
                                                        attackerATK = attacker.damage
                                                        attackerSPD = attacker.speed
                                                        attackerDEF = attacker.defense
                                                        attackerRES = attacker.resistance
                                                        //初始化 defender 角色數據
                                                        defender = characterStorage[n][m]
                                                        defenderNAME = defender.unitName
                                                        defenderHP = defender.hitPoint
                                                        defenderATK = defender.damage
                                                        defenderSPD = defender.speed
                                                        defenderDEF = defender.defense
                                                        defenderRES = defender.resistance
                                                        //宣告攻擊開始
                                                        console.log(attackerNAME + " 對 " + defenderNAME + " 發動攻擊")
                                                        //技能前數值 log 顯示
                                                        /*
                                                        console.log("上技能之前的數值")
                                                        console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                                                        console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                                                        console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                                                        console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                                                        console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                                                        console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                                                        console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                                                        console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                                                        console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                                                        console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                                                        */

                                                        //attacker 的技能
                                                        if(attacker.skill1Name == "渾沌學")
                                                        {
                                                            buffATK = Math.floor(attackerATK * attacker.skill1Level * 0.2)
                                                            attackerATK += buffATK
                                                            console.log(attackerNAME + " 透過技能 渾沌學（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 攻擊 + " + buffATK)
                                                        }

                                                        if(attacker.skill2Name == "覺醒" && attacker.skill2Level > 0)
                                                        {
                                                            buffSPD = attacker.skill1Level * 2
                                                            attackerSPD += buffSPD
                                                            console.log(attackerNAME + " 透過技能 覺醒（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 速度 + " + buffSPD)
                                                        }

                                                        if(attacker.skill1Name == "衝敵斬" && attacker.skill1Level > 0)
                                                        {
                                                            if(attackerHP >= attacker.hitPointMaxium * (1 - 0.25 * attacker.skill1Level)){
                                                                debuffATK = 5
                                                                defenderATK -= debuffATK
                                                                console.log(attackerNAME + " 透過技能 衝敵斬（" + attacker.skill1Description[attacker.skill1Level] + "）使 " + defenderNAME + " 攻擊 - " + debuffATK)
                                                            }
                                                        }

                                                        if(attacker.skill1Name == "華炎" && attacker.skill1Level > 0)
                                                        {
                                                            buffDEF = Math.floor(attackerDEF * (0.1 + attacker.skill1Level * 0.2))
                                                            attackerDEF += buffDEF
                                                            console.log(attackerNAME + " 透過技能 華炎（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 防守 + " + buffDEF)
                                                        }
                                                        
                                                        if(attacker.skill3Name == "憤怒" && attacker.skill3Level > 0)
                                                        {
                                                            if(attackerHP <= attacker.hitPointMaxium * (0.25 * attacker.skill3Level)){
                                                                    buffATK = 10
                                                                    attackerATK += buffATK
                                                                    console.log(attackerNAME + " 透過技能 憤怒（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                                                }
                                                        }

                                                        if(attacker.skill1Name == "強化" && attacker.skill1Level > 0)
                                                        {
                                                            buff = attacker.skill1Level
                                                            attackerATK += buff
                                                            attackerSPD += buff
                                                            console.log(attackerNAME + " 透過技能 強化（" + attacker.skill1Description[attacker.skill1Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff)
                                                        }

                                                        if(attacker.skill2Name == "附身")
                                                        {
                                                            buff = attacker.skill2Level * 3 - 2
                                                            attackerATK += buff
                                                            attackerSPD += buff
                                                            attackerDEF += buff
                                                            attackerRES += buff
                                                            console.log(attackerNAME + " 透過技能 附身（" + attacker.skill2Description[attacker.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                                                        }
                                                        
                                                        if(attacker.skill2Name == "破防擊" && attacker.skill2Level > 0){
                                                            debuffDEF = Math.floor(defenderDEF * (0.1 + attacker.skill2Level * 0.2))
                                                            debuffRES = Math.floor(defenderRES * (0.1 + attacker.skill2Level * 0.2))
                                                            defenderDEF -= debuffDEF
                                                            defenderRES -= debuffRES
                                                            console.log(attackerNAME + " 透過技能 破防擊（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 防守 - " + debuffDEF + " 魔防 - " + debuffRES)
                                                        }

                                                        if(attacker.skill3Name == "暴雷")
                                                        {
                                                            buffATK = Math.floor(attackerATK * attacker.skill3Level * 0.3)
                                                            attackerATK += buffATK
                                                            console.log(attackerNAME + " 透過技能 暴雷（" + attacker.skill3Description[attacker.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                                        }

                                                        //defender 的技能

                                                        if(defender.skill3Name == "尊嚴" && defender.skill3Level > 0)
                                                        {
                                                            if(defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill3Level)){
                                                                buffATK = 2 * defender.skill3Level
                                                                buffDEF = 2 * defender.skill3Level
                                                                defenderATK += buffATK
                                                                defenderDEF += buffDEF
                                                                console.log(defenderNAME + " 透過技能 尊嚴（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK + " 防守 + " + buffDEF)
                                                            }
                                                            else{
                                                                debuffATK = 7
                                                                debuffDEF = 7
                                                                defenderATK -= debuffATK
                                                                defenderDEF -= debuffDEF
                                                                console.log(defenderNAME + " 透過技能 尊嚴（" + defender.skill3Description[defender.skill3Level] + "）降低 攻擊 - " + debuffATK + " 防守 - " + debuffATK)
                                                            }
                                                        }

                                                        if(defender.skill3Name == "麗華")
                                                        {
                                                            buffRES = defender.skill3Level * 2
                                                            defenderRES += buffRES
                                                            console.log(defenderNAME + " 透過技能 緋炎（" + defender.skill3Description[defender.skill3Level] + "）獲得 防守 + " + buffRES)
                                                        }

                                                        if(defender.skill2Name == "生命的代價" && defender.skill2Level > 0)
                                                        {
                                                            buff = defender.skill2Level
                                                            defenderATK += buff
                                                            defenderSPD += buff
                                                            defenderDEF += buff
                                                            defenderRES += buff
                                                            console.log(defenderNAME + " 透過技能 生命的代價（" + defender.skill2Description[defender.skill2Level] + "）獲得 攻擊 + " + buff + " 速度 + " + buff + " 防守 + " + buff + " 魔防 + " + buff)
                                                        }

                                                        if(defender.skill3Name == "憤怒")
                                                        {
                                                            if(defenderHP <= defender.hitPointMaxium * (0.25 * defender.skill3Level)){
                                                                    buffATK = 10
                                                                    defenderATK += buffATK
                                                                    console.log(defenderNAME + " 透過技能 憤怒（" + defender.skill3Description[defender.skill3Level] + "）獲得 攻擊 + " + buffATK)
                                                                }
                                                        }

                                                        if(defender.skill3Name == "完美" && defender.skill3Level > 0)
                                                        {
                                                            if(defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill3Level)){
                                                                buffSPD = 2 * defender.skill3Level
                                                                buffRES = 2 * defender.skill3Level
                                                                defenderSPD += buffSPD
                                                                defenderRES += buffRES
                                                                console.log(defenderNAME + " 透過技能 完美（" + defender.skill3Description[defender.skill3Level] + "）獲得 速度 + " + buffSPD + " 魔防 + " + buffRES)
                                                            }
                                                            else{
                                                                debuffSPD = 7
                                                                debuffRES = 7
                                                                defenderATK -= debuffSPD
                                                                defenderRES -= debuffRES
                                                                console.log(defenderNAME + " 透過技能 完美（" + defender.skill3Description[defender.skill3Level] + "）降低 速度 - " + debuffSPD + " 魔防 - " + debuffRES)
                                                            }
                                                        }

                                                        //戰鬥前數值 log 顯示
                                                        /*
                                                        console.log("上技能之後的數值")
                                                        console.log(attackerNAME + " 的 HP 為 " + attackerHP)
                                                        console.log(attackerNAME + " 的 ATK 為 " + attackerATK)
                                                        console.log(attackerNAME + " 的 SPD 為 " + attackerSPD)
                                                        console.log(attackerNAME + " 的 DEF 為 " + attackerDEF)
                                                        console.log(attackerNAME + " 的 RES 為 " + attackerRES)
                                                        console.log(defenderNAME + " 的 HP 為 " + defenderHP)
                                                        console.log(defenderNAME + " 的 ATK 為 " + defenderATK)
                                                        console.log(defenderNAME + " 的 SPD 為 " + defenderSPD)
                                                        console.log(defenderNAME + " 的 DEF 為 " + defenderDEF)
                                                        console.log(defenderNAME + " 的 RES 為 " + defenderRES)
                                                        */
                                                        
                                                        //戰鬥前的技能

                                                        
                                                        if(attacker.weaponAttribute == 0){
                                                            attackingTrueDefRes = defenderDEF
                                                            //console.log(attackerNAME + " 以 " + defenderNAME + " 的 防守 計算傷害")
                                                        }
                                                        if(attacker.weaponAttribute == 1){
                                                            attackingTrueDefRes = defenderRES
                                                            //console.log(attackerNAME + " 以 " + defenderNAME + " 的 魔防 計算傷害")
                                                        }
                                                        if(defender.weaponAttribute == 0){
                                                            defendingTrueDefRes = attackerDEF
                                                            //console.log(defenderNAME + " 以 " + attackerNAME + " 的 防守 計算傷害")
                                                        }
                                                        if(defender.weaponAttribute == 1){
                                                            defendingTrueDefRes = attackerRES
                                                            //console.log(defenderNAME + " 以 " + attackerNAME + " 的 魔防 計算傷害")
                                                        }
                                                        

                                                        attackerFollowUp = 0
                                                        defenderFollowUp = 0
                                                        if(attackerSPD > defenderSPD + 5){
                                                            attackerFollowUp +=1
                                                            console.log(attackerNAME + " 因為速度高於敵人 5 以上，可以追擊")
                                                        }
                                                        if(defenderSPD > attackerSPD + 5){
                                                            defenderFollowUp +=1
                                                            console.log(defenderNAME + " 因為速度高於敵人 5 以上，可以追擊")
                                                        }

                                                        if(defender.skill2Name == "回擊" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill2Level)){
                                                            defenderFollowUp += 1
                                                            console.log(defenderNAME + " 透過技能 回擊（" + defender.skill2Description[defender.skill2Level] + "）獲得 反手追擊")
                                                        }

                                                        attackingTrueDamage = attackerATK - attackingTrueDefRes
                                                        if(attackingTrueDamage < 0) attackingTrueDamage = 0
                                                        //console.log(attackerNAME + " 對 " + defenderNAME + " 會造成 " + attackingTrueDamage + " 點傷害")
                                                        defendingTrueDamage = defenderATK - defendingTrueDefRes
                                                        if(defendingTrueDamage < 0) defendingTrueDamage = 0
                                                        //console.log(defenderNAME + " 對 " + attackerNAME + " 會造成 " + defendingTrueDamage + " 點傷害")

                                                        if(defender.skill1Name == "不動如山" && defenderHP >= defender.hitPointMaxium * (1 - 0.25 * defender.skill1Level)){
                                                            attackerFollowUp = 0
                                                            defenderFollowUp = 0
                                                            console.log(defenderNAME + " 透過技能 不動如山（" + defender.skill1Description[defender.skill1Level] + "）使自己與敵人皆無法進行追擊")
                                                        }

                                                        if(attacker.skill2Name == "靜謐" ){
                                                            attackerFollowUp = 0
                                                            if(attackerSPD >= defenderSPD + (-1 + 2 * attacker.skill2Level)){
                                                                defendingTrueDamage = 0
                                                                console.log(attackerNAME + " 透過技能 靜謐（" + attacker.skill2Description[attacker.skill2Level] + "）使 " + defenderNAME + " 無法反擊")
                                                            }
                                                        }

                                                        if(attacker.weaponName == "始祖斬裂劍"){
                                                            attackingTrueDamage = attackingTrueDamage * 2
                                                            console.log(attackerNAME + " 透過武器 始祖斬裂劍（" + attacker.weaponDescripton + "）獲得 攻擊兩次")
                                                        }
                                                        
                                                        if(attacker.weaponRange != defender.weaponRange){
                                                            defendingTrueDamage = 0
                                                            //console.log(defenderNAME + " 無法反擊")
                                                        }

                                                        if(defender.skill2Name == "反擊" && defender.skill2Level >= 2){
                                                            defendingTrueDamage = defenderATK - defendingTrueDefRes
                                                            console.log(defenderNAME + " 透過技能 反擊（" + defender.skill3Description[defender.skill3Level] + "）撤銷 自身無法反擊")
                                                        }

                                                        //戰鬥中的技能
                                                        console.log("攻擊前：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)

                                                        //attacker 攻擊
                                                        defenderHP -= attackingTrueDamage

                                                        if(attackerHP <= attacker.hitPointMaxium * attacker.skill3Level * 0.25 && attacker.skill3Name == "同歸於盡"){
                                                                debuff = Math.floor(defenderATK * 0.5)
                                                                attackerHP -= debuff
                                                                console.log(attackerNAME + " 透過技能 同歸於盡（" + attacker.skill3Description[attacker.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                                                        }
                                                        console.log(attackerNAME + " 對 " + defenderNAME + " 造成 " + attackingTrueDamage + " 點傷害 ") 

                                                        //defender 反擊
                                                        if(defenderHP > 0){
                                                            attackerHP -= defendingTrueDamage

                                                            if(defenderHP < 0 && defender.skill1Name == "至聖召喚師" && defender.skill1Level > 1){
                                                                defenderHP = 1
                                                                console.log(defenderNAME + " 透過技能 至聖召喚師（" + defender.skill1Description[defender.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                                                                defenderdefender.skill1Level = 0
                                                            }

                                                            if(defender.skill2Name == "奉獻"){
                                                                buff = Math.floor(attackingTrueDamage * (0.25 * defender.skill2Level))
                                                                defenderHP += buff
                                                                overload = defenderHP - defender.hitPointMaxium
                                                                if(overload >= 0){
                                                                    defenderHP = defender.hitPointMaxium
                                                                    buff -= overload    
                                                                }
                                                                console.log(defenderNAME + " 透過技能 奉獻（" + defender.skill2Description[defender.skill2Level] + "）回復了 " + buff + " 點傷害")
                                                            }
                                                            
                                                            console.log(defenderNAME + " 對 " + attackerNAME + " 造成 " + defendingTrueDamage + " 點傷害 ")
                                                        }
                                                        

                                                        //attacker 追擊
                                                        if(attackerFollowUp == 1 && attackerHP > 0){
                                                            defenderHP -= attackingTrueDamage

                                                            defenderHP -= attackingTrueDamage
                                                            if(defenderHP < 0 && defender.skill1Name == "渾沌默靈" && defender.skill1Level > 1){
                                                                defenderHP = 1
                                                                console.log(defenderNAME + " 透過技能 渾沌默靈（" + attacker.skill1Description[attacker.skill1Level] + "）將傷害降低至 HP 剩餘 1 點")
                                                                defenderattacker.skill1Level = 0
                                                            }

                                                            if(attacker.skill2Name == "奉獻"){
                                                                buff = Math.floor(attackingTrueDamage * (0.25 * attacker.skill2Level))
                                                                attackerHP += buff
                                                                overload = attackerHP - attacker.hitPointMaxium
                                                                if(overload >= 0){
                                                                    attackerHP = attacker.hitPointMaxium
                                                                    buff -= overload    
                                                                }
                                                                console.log(attackerNAME + " 透過技能 奉獻（" + attacker.skill2Description[attacker.skill2Level] + "）回復了 " + buff + " 點傷害")
                                                            }
                                                            console.log(attackerNAME + " 對 " + defenderNAME + " 追擊 " + attackingTrueDamage + " 點傷害 ") 
                                                        }
                                                        

                                                        //defender 反擊
                                                        if(defenderFollowUp == 1 && defenderHP > 0){
                                                            attackerHP -= defendingTrueDamage

                                                            if(defenderHP <= defender.hitPointMaxium * defender.skill3Level * 0.25 && defender.skill3Name == "同歸於盡"){
                                                                debuff = Math.floor(defenderATK * 0.5)
                                                                attackerHP -= debuff
                                                                console.log(defenderNAME + " 透過技能 同歸於盡（" + defender.skill3Description[defender.skill3Level] + "）額外對 " + attackerNAME + " 造成 " + debuff + " 點傷害")
                                                            }

                                                            console.log(defenderNAME + " 對 " + attackerNAME + " 追擊 " + defendingTrueDamage + " 點傷害 ")
                                                        }

                                                        characterStorage[l][k].hitPoint = attackerHP
                                                        characterStorage[n][m].hitPoint = defenderHP

                                                        //戰鬥後的技能
                                                        if(defender.skill3Name == "復甦" && defenderHP > 0 && defender.skill3Level > 0){
                                                            buff = -2 + 4 * defender.skill3Level
                                                            defenderHP += buff
                                                            if(defenderHP > defender.hitPointMaxium[difficulty]){
                                                                overload = defenderHP - defender.hitPointMaxium[difficulty]
                                                                defenderHP = defender.hitPointMaxium[difficulty]
                                                                buff -= overload
                                                            }
                                                            console.log(defenderNAME + " 透過技能 復甦（" + defender.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                                                        }

                                                        if(attacker.skill3Name == "復甦" && attackerHP > 0 && attacker.skill3Level > 0){
                                                            buff = -2 + 4 * attacker.skill3Level
                                                            attackerHP += buff
                                                            if(attackerHP > attacker.hitPointMaxium[difficulty]){
                                                                overload = attackerHP - attacker.hitPointMaxium[difficulty]
                                                                attackerHP = attacker.hitPointMaxium[difficulty]
                                                                buff -= overload
                                                            }
                                                            console.log(attackerNAME + " 透過技能 復甦（" + attacker.skill3Description[defender.skill3Level] + "）在戰鬥後恢復 " + buff + " HP")
                                                        }


                                                        if(attacker.skill3Name == "蛇毒" && attackerHP > 0 && attacker.skill3Level > 0){
                                                            debuff = 1 + 3 * attacker.skill3Level
                                                            if(defenderHP < debuff){
                                                                defenderHP = 1
                                                                debuff = defenderHP - 1
                                                            }
                                                            else defenderHP -= debuff
                                                            console.log(attackerNAME + " 透過技能 蛇毒（" + attacker.skill3Description[attacker.skill3Level] + "）在戰鬥後對 " + defenderNAME + " 造成 " + debuff + " 點傷害")
                                                        }

                                                        if(defender.skill3Name == "生命的代價" && defenderHP > 0 && defender.skill2Level > 0)
                                                        {
                                                            debuff = 2 * defender.skill2Level
                                                            if(defenderHP < debuff){
                                                                defenderHP = 1
                                                                debuff = defenderHP - 1
                                                            }
                                                            else defenderHP -= debuff
                                                            console.log(defenderNAME + " 在戰鬥後，因為技能 生命的代價（" + defender.skill3Description[defender.skill3Level] + "）而喪失 HP " + debuff)
                                                        }

                                                        characterStorage[l][k].hitPoint = attackerHP
                                                        characterStorage[n][m].hitPoint = defenderHP
                                                        console.log("攻擊後：" + attackerNAME + " " + attackerHP + " " + defenderNAME + " " + defenderHP)
                                                        updateInfoPanel(l,k,n,m)
                                                        checkAlive(l,k,n,m)
                                                    },waitTime*2000)
                                                    attackFlag=1
                                                    waitTime++
                                                    break
                                                }                                                
                                            }
                                            if(attackFlag) break
                                        }
                                        if(attackFlag) break
                                    }
                                }
                                if(attackFlag)
                                {
                                    attackFlag=0
                                    break
                                }
                            }
                        }
                    }
                }                
                setTimeout(function(){playerTurn()},waitTime*2000)
            }

            function playerTurn()
            {
                playerAction=allyAliveUnit
                console.log("我方回合")
                for(let i=0;i<10;i++)
                {
                    for(let j=0;j<20;j++)
                    {            
                        if(characterStorage[j][i]!=undefined&&characterStorage[j][i].side=="alpha")
                        {
                            characterStorage[j][i].attackActionPoint=1
                            characterStorage[j][i].moveActionPoint=1
                            if(monk.hitPoint > 0){
                                if(monk.skill1Level < 3){
                                    buff = 5 * ( monk.skill1Level + 1)
                                }
                                else buff = monk.damage * 0.8
                                
                                characterStorage[j][i].hitPoint += buff
                                if(characterStorage[j][i].hitPoint > characterStorage[j][i].hitPointMaxium){
                                    overload = characterStorage[j][i].hitPoint - characterStorage[j][i].hitPointMaxium
                                    characterStorage[j][i].hitPoint = characterStorage[j][i].hitPointMaxium
                                    buff -= overload
                                }
                                if(buff > 0) console.log(characterStorage[j][i].unitName + " 透過僧侶的技能 治癒杖（" + monk.skill1Description[monk.skill1Level] + "）恢復 " + buff + " HP")     
                            }
                        }                         
                    }
                }
                document.getElementById("turn").innerHTML="我方回合 剩餘可行動單位 : "+playerAction
            }

            function updateInfoPanel(attackerX,attackerY,defenderX,defenderY)
            {
                document.getElementById("attackerIcon").innerHTML=characterStorage[attackerX][attackerY].unitIcon+"<br>"+characterStorage[attackerX][attackerY].unitName
                document.getElementById("attackerState").innerHTML="HP : "+characterStorage[attackerX][attackerY].hitPoint+"<br>DMG : "+characterStorage[attackerX][attackerY].damage+"<br>SPD : "+characterStorage[attackerX][attackerY].speed+"<br>DEF : "+characterStorage[attackerX][attackerY].defense+"<br>RES : "+characterStorage[attackerX][attackerY].resistance
                document.getElementById("attackerSkill").innerHTML=characterStorage[attackerX][attackerY].skill1Icon+"<br>"+characterStorage[attackerX][attackerY].skill1Name
                document.getElementById("defenderIcon").innerHTML=characterStorage[defenderX][defenderY].unitIcon+"<br>"+characterStorage[defenderX][defenderY].unitName
                document.getElementById("defenderState").innerHTML="HP : "+characterStorage[defenderX][defenderY].hitPoint+"<br>DMG : "+characterStorage[defenderX][defenderY].damage+"<br>SPD : "+characterStorage[defenderX][defenderY].speed+"<br>DEF : "+characterStorage[defenderX][defenderY].defense+"<br>RES : "+characterStorage[defenderX][defenderY].resistance
                document.getElementById("defenderSkill").innerHTML=characterStorage[defenderX][defenderY].skill1Icon+"<br>"+characterStorage[defenderX][defenderY].skill1Name
            }
            
            window.addEventListener("load",cover,false)
        </script>
    </head>
    <body id="body">
        <div id="display"></div>
    </body>
</html>
